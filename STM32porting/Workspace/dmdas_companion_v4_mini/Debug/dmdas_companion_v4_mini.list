
dmdas_companion_v4_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008228  08008228  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008230  08008230  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000070  080082a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080082a8  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019584  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f2  00000000  00000000  00039624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0003c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6af  00000000  00000000  0003ee78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001775d  00000000  00000000  0005e527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a22  00000000  00000000  00075c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f6a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  0013f6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008188 	.word	0x08008188

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08008188 	.word	0x08008188

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eba:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <MX_GPIO_Init+0x12c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a44      	ldr	r2, [pc, #272]	; (8000fd0 <MX_GPIO_Init+0x12c>)
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <MX_GPIO_Init+0x12c>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0320 	and.w	r3, r3, #32
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <MX_GPIO_Init+0x12c>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a3e      	ldr	r2, [pc, #248]	; (8000fd0 <MX_GPIO_Init+0x12c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b3c      	ldr	r3, [pc, #240]	; (8000fd0 <MX_GPIO_Init+0x12c>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <MX_GPIO_Init+0x12c>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a38      	ldr	r2, [pc, #224]	; (8000fd0 <MX_GPIO_Init+0x12c>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <MX_GPIO_Init+0x12c>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HCSR_TRIG_Pin|MOTOR_DIRECTION_Pin|MOTOR_ENABLE_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f240 4111 	movw	r1, #1041	; 0x411
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f002 f968 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_STEP_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f16:	482f      	ldr	r0, [pc, #188]	; (8000fd4 <MX_GPIO_Init+0x130>)
 8000f18:	f002 f962 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = HCSR_TRIG_Pin|MOTOR_DIRECTION_Pin|MOTOR_ENABLE_Pin;
 8000f1c:	f240 4311 	movw	r3, #1041	; 0x411
 8000f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f001 ffb8 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_EN_MOT_Pin;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PLC_EN_MOT_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4821      	ldr	r0, [pc, #132]	; (8000fd4 <MX_GPIO_Init+0x130>)
 8000f50:	f001 ffac 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_DIRECTION_Pin;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PLC_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f001 ff9e 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = END_STOPmin_Pin|END_STOPmax_Pin;
 8000f70:	2330      	movs	r3, #48	; 0x30
 8000f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_GPIO_Init+0x134>)
 8000f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <MX_GPIO_Init+0x130>)
 8000f84:	f001 ff92 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin|LD2_Pin;
 8000f88:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <MX_GPIO_Init+0x130>)
 8000fa2:	f001 ff83 	bl	8002eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	200a      	movs	r0, #10
 8000fac:	f001 fe89 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f001 fea0 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2017      	movs	r0, #23
 8000fbc:	f001 fe81 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fc0:	2017      	movs	r0, #23
 8000fc2:	f001 fe98 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	10110000 	.word	0x10110000

08000fdc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_I2C2_Init+0x74>)
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <MX_I2C2_Init+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x107075B0;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_I2C2_Init+0x74>)
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <MX_I2C2_Init+0x7c>)
 8000fea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_I2C2_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_I2C2_Init+0x74>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_I2C2_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_I2C2_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_I2C2_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_I2C2_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_I2C2_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <MX_I2C2_Init+0x74>)
 8001018:	f002 f92c 	bl	8003274 <HAL_I2C_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001022:	f000 fc5f 	bl	80018e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001026:	2100      	movs	r1, #0
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <MX_I2C2_Init+0x74>)
 800102a:	f002 ff05 	bl	8003e38 <HAL_I2CEx_ConfigAnalogFilter>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001034:	f000 fc56 	bl	80018e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_I2C2_Init+0x74>)
 800103c:	f002 ff47 	bl	8003ece <HAL_I2CEx_ConfigDigitalFilter>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001046:	f000 fc4d 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000b4 	.word	0x200000b4
 8001054:	40005800 	.word	0x40005800
 8001058:	107075b0 	.word	0x107075b0

0800105c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a26      	ldr	r2, [pc, #152]	; (8001114 <HAL_I2C_MspInit+0xb8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d145      	bne.n	800110a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_I2C_MspInit+0xbc>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a25      	ldr	r2, [pc, #148]	; (8001118 <HAL_I2C_MspInit+0xbc>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_I2C_MspInit+0xbc>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_I2C_MspInit+0xbc>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_I2C_MspInit+0xbc>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_I2C_MspInit+0xbc>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ae:	2301      	movs	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010be:	2304      	movs	r3, #4
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4814      	ldr	r0, [pc, #80]	; (800111c <HAL_I2C_MspInit+0xc0>)
 80010ca:	f001 feef 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d4:	2312      	movs	r3, #18
 80010d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010e0:	2304      	movs	r3, #4
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f001 fedd 	bl	8002eac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_I2C_MspInit+0xbc>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_I2C_MspInit+0xbc>)
 80010f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010fc:	6593      	str	r3, [r2, #88]	; 0x58
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_I2C_MspInit+0xbc>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40005800 	.word	0x40005800
 8001118:	40021000 	.word	0x40021000
 800111c:	48001400 	.word	0x48001400

08001120 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t time){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <delay_us+0x30>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3)<time);
 8001132:	bf00      	nop
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <delay_us+0x30>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3f9      	bcc.n	8001134 <delay_us+0x14>
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000184 	.word	0x20000184

08001154 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	/* HC_SR04 INTERRUPT*/
	if(htim->Instance == TIM3){
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a97      	ldr	r2, [pc, #604]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d16a      	bne.n	800123c <HAL_TIM_IC_CaptureCallback+0xe8>
		uint16_t val = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001166:	2100      	movs	r1, #0
 8001168:	4896      	ldr	r0, [pc, #600]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x270>)
 800116a:	f004 fa7d 	bl	8005668 <HAL_TIM_ReadCapturedValue>
 800116e:	4603      	mov	r3, r0
 8001170:	81fb      	strh	r3, [r7, #14]
		if(!rised_hc){
 8001172:	4b95      	ldr	r3, [pc, #596]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d116      	bne.n	80011a8 <HAL_TIM_IC_CaptureCallback+0x54>
			dist_time1 = val;
 800117a:	4a94      	ldr	r2, [pc, #592]	; (80013cc <HAL_TIM_IC_CaptureCallback+0x278>)
 800117c:	89fb      	ldrh	r3, [r7, #14]
 800117e:	8013      	strh	r3, [r2, #0]
			rised_hc = 1;
 8001180:	4b91      	ldr	r3, [pc, #580]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6a1a      	ldr	r2, [r3, #32]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 020a 	bic.w	r2, r2, #10
 8001194:	621a      	str	r2, [r3, #32]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6a1a      	ldr	r2, [r3, #32]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 0202 	orr.w	r2, r2, #2
 80011a4:	621a      	str	r2, [r3, #32]
 80011a6:	e049      	b.n	800123c <HAL_TIM_IC_CaptureCallback+0xe8>
		}else{ //falling
			if(val >= dist_time1){
 80011a8:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_TIM_IC_CaptureCallback+0x278>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	89fa      	ldrh	r2, [r7, #14]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d318      	bcc.n	80011e4 <HAL_TIM_IC_CaptureCallback+0x90>
				distance = (uint32_t)((val - dist_time1)*100/58.0); // decimi di millimetro
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	4a85      	ldr	r2, [pc, #532]	; (80013cc <HAL_TIM_IC_CaptureCallback+0x278>)
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	2264      	movs	r2, #100	; 0x64
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9cf 	bl	8000564 <__aeabi_i2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80011cc:	f7ff fb5e 	bl	800088c <__aeabi_ddiv>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcc8 	bl	8000b6c <__aeabi_d2uiz>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a7d      	ldr	r2, [pc, #500]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x280>)
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01a      	b.n	800121a <HAL_TIM_IC_CaptureCallback+0xc6>
			}else{
				distance = (uint32_t)(((0xffff-dist_time1)+val)*100/58.0);
 80011e4:	4b79      	ldr	r3, [pc, #484]	; (80013cc <HAL_TIM_IC_CaptureCallback+0x278>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80011ec:	33ff      	adds	r3, #255	; 0xff
 80011ee:	89fa      	ldrh	r2, [r7, #14]
 80011f0:	4413      	add	r3, r2
 80011f2:	2264      	movs	r2, #100	; 0x64
 80011f4:	fb02 f303 	mul.w	r3, r2, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f9b3 	bl	8000564 <__aeabi_i2d>
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b73      	ldr	r3, [pc, #460]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001204:	f7ff fb42 	bl	800088c <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fcac 	bl	8000b6c <__aeabi_d2uiz>
 8001214:	4603      	mov	r3, r0
 8001216:	4a6f      	ldr	r2, [pc, #444]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001218:	6013      	str	r3, [r2, #0]
			}
			rised_hc = 0;
 800121a:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x274>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 020a 	bic.w	r2, r2, #10
 800122e:	621a      	str	r2, [r3, #32]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6a12      	ldr	r2, [r2, #32]
 800123a:	621a      	str	r2, [r3, #32]
		}

	}
	/*CUSTOM PROTOCOL INTERRUPT*/
	if(htim->Instance == TIM4){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a65      	ldr	r2, [pc, #404]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001242:	4293      	cmp	r3, r2
 8001244:	f040 80b7 	bne.w	80013b6 <HAL_TIM_IC_CaptureCallback+0x262>

		uint16_t val = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001248:	2100      	movs	r1, #0
 800124a:	4864      	ldr	r0, [pc, #400]	; (80013dc <HAL_TIM_IC_CaptureCallback+0x288>)
 800124c:	f004 fa0c 	bl	8005668 <HAL_TIM_ReadCapturedValue>
 8001250:	4603      	mov	r3, r0
 8001252:	81bb      	strh	r3, [r7, #12]
		if(first_wave_rec==0){
 8001254:	4b62      	ldr	r3, [pc, #392]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d145      	bne.n	80012e8 <HAL_TIM_IC_CaptureCallback+0x194>

			if(!rised_plc){
 800125c:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x290>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d116      	bne.n	8001292 <HAL_TIM_IC_CaptureCallback+0x13e>

				dur_time1 = val;
 8001264:	4a60      	ldr	r2, [pc, #384]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001266:	89bb      	ldrh	r3, [r7, #12]
 8001268:	8013      	strh	r3, [r2, #0]
				rised_plc = 1;
 800126a:	4b5e      	ldr	r3, [pc, #376]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x290>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6a1a      	ldr	r2, [r3, #32]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 020a 	bic.w	r2, r2, #10
 800127e:	621a      	str	r2, [r3, #32]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6a1a      	ldr	r2, [r3, #32]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0202 	orr.w	r2, r2, #2
 800128e:	621a      	str	r2, [r3, #32]
		}


	}

}
 8001290:	e091      	b.n	80013b6 <HAL_TIM_IC_CaptureCallback+0x262>
					if(val>=dur_time1){
 8001292:	4b55      	ldr	r3, [pc, #340]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	89ba      	ldrh	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d307      	bcc.n	80012ac <HAL_TIM_IC_CaptureCallback+0x158>
						dur1= val-dur_time1;
 800129c:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x294>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	89ba      	ldrh	r2, [r7, #12]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b51      	ldr	r3, [pc, #324]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x298>)
 80012a8:	801a      	strh	r2, [r3, #0]
 80012aa:	e008      	b.n	80012be <HAL_TIM_IC_CaptureCallback+0x16a>
						dur1= (0xffff-dur_time1)+val;
 80012ac:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x294>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	89ba      	ldrh	r2, [r7, #12]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x298>)
 80012bc:	801a      	strh	r2, [r3, #0]
					rised_plc=0;
 80012be:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x290>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a1a      	ldr	r2, [r3, #32]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 020a 	bic.w	r2, r2, #10
 80012d2:	621a      	str	r2, [r3, #32]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a12      	ldr	r2, [r2, #32]
 80012de:	621a      	str	r2, [r3, #32]
					first_wave_rec=1;
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
}
 80012e6:	e066      	b.n	80013b6 <HAL_TIM_IC_CaptureCallback+0x262>
				if(!rised_plc){
 80012e8:	4b3e      	ldr	r3, [pc, #248]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x290>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d116      	bne.n	800131e <HAL_TIM_IC_CaptureCallback+0x1ca>
					dur_time1 = val;
 80012f0:	4a3d      	ldr	r2, [pc, #244]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x294>)
 80012f2:	89bb      	ldrh	r3, [r7, #12]
 80012f4:	8013      	strh	r3, [r2, #0]
					rised_plc = 1;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x290>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 020a 	bic.w	r2, r2, #10
 800130a:	621a      	str	r2, [r3, #32]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6a1a      	ldr	r2, [r3, #32]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0202 	orr.w	r2, r2, #2
 800131a:	621a      	str	r2, [r3, #32]
}
 800131c:	e04b      	b.n	80013b6 <HAL_TIM_IC_CaptureCallback+0x262>
						if(val>=dur_time1){
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	89ba      	ldrh	r2, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d307      	bcc.n	8001338 <HAL_TIM_IC_CaptureCallback+0x1e4>
							dur2= val-dur_time1;
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x294>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	89ba      	ldrh	r2, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001334:	801a      	strh	r2, [r3, #0]
 8001336:	e008      	b.n	800134a <HAL_TIM_IC_CaptureCallback+0x1f6>
							dur2= (0xffff-dur_time1)+val;
 8001338:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x294>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	89ba      	ldrh	r2, [r7, #12]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b29b      	uxth	r3, r3
 8001342:	3b01      	subs	r3, #1
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001348:	801a      	strh	r2, [r3, #0]
						rised_plc=0;
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x290>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a1a      	ldr	r2, [r3, #32]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 020a 	bic.w	r2, r2, #10
 800135e:	621a      	str	r2, [r3, #32]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6a12      	ldr	r2, [r2, #32]
 800136a:	621a      	str	r2, [r3, #32]
						first_wave_rec=0;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
						dur1 = (dur1/15)-15;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x298>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b0f      	subs	r3, #15
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x298>)
 8001386:	801a      	strh	r2, [r3, #0]
						dur2 = (dur2/15)-15;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b0f      	subs	r3, #15
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800139c:	801a      	strh	r2, [r3, #0]
						magic_number = (dur1<<5)|dur2;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x298>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80013b4:	801a      	strh	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40000400 	.word	0x40000400
 80013c4:	20000184 	.word	0x20000184
 80013c8:	2000008c 	.word	0x2000008c
 80013cc:	2000008e 	.word	0x2000008e
 80013d0:	404d0000 	.word	0x404d0000
 80013d4:	20000090 	.word	0x20000090
 80013d8:	40000800 	.word	0x40000800
 80013dc:	20000138 	.word	0x20000138
 80013e0:	20000095 	.word	0x20000095
 80013e4:	20000094 	.word	0x20000094
 80013e8:	2000009a 	.word	0x2000009a
 80013ec:	20000096 	.word	0x20000096
 80013f0:	20000098 	.word	0x20000098
 80013f4:	88888889 	.word	0x88888889
 80013f8:	2000009c 	.word	0x2000009c

080013fc <HCSR04_trigger>:

void HCSR04_trigger(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HCSR_TRIG_GPIO_Port, HCSR_TRIG_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2101      	movs	r1, #1
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f001 feea 	bl	80031e0 <HAL_GPIO_WritePin>
	delay_us(10);
 800140c:	200a      	movs	r0, #10
 800140e:	f7ff fe87 	bl	8001120 <delay_us>
	HAL_GPIO_WritePin(HCSR_TRIG_GPIO_Port, HCSR_TRIG_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2101      	movs	r1, #1
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f001 fee1 	bl	80031e0 <HAL_GPIO_WritePin>

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <move_stepper>:

void move_stepper(uint32_t steps){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_DIRECTION_GPIO_Port, MOTOR_DIRECTION_Pin,direction );
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <move_stepper+0x70>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	2110      	movs	r1, #16
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f001 fed2 	bl	80031e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001446:	f001 fecb 	bl	80031e0 <HAL_GPIO_WritePin>
	 for (int i = 0; i <steps ; i++)
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e012      	b.n	8001476 <move_stepper+0x52>
	  {

		 HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, 1);
 8001450:	2201      	movs	r2, #1
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	4810      	ldr	r0, [pc, #64]	; (8001498 <move_stepper+0x74>)
 8001456:	f001 fec3 	bl	80031e0 <HAL_GPIO_WritePin>
		 delay_us(30);
 800145a:	201e      	movs	r0, #30
 800145c:	f7ff fe60 	bl	8001120 <delay_us>
		 HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2140      	movs	r1, #64	; 0x40
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <move_stepper+0x74>)
 8001466:	f001 febb 	bl	80031e0 <HAL_GPIO_WritePin>
		 delay_us(30);
 800146a:	201e      	movs	r0, #30
 800146c:	f7ff fe58 	bl	8001120 <delay_us>
	 for (int i = 0; i <steps ; i++)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	d8e8      	bhi.n	8001450 <move_stepper+0x2c>
	  }
	 HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, 1);
 800147e:	2201      	movs	r2, #1
 8001480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f001 feaa 	bl	80031e0 <HAL_GPIO_WritePin>

}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200000a4 	.word	0x200000a4
 8001498:	48000400 	.word	0x48000400
 800149c:	00000000 	.word	0x00000000

080014a0 <move_stepper_dec_mm>:

void move_stepper_dec_mm(uint32_t dec_mm){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	moving = 1;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <move_stepper_dec_mm+0x80>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
	if(direction){
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <move_stepper_dec_mm+0x84>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <move_stepper_dec_mm+0x2e>
		open_loop_motor_position += dec_mm;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <move_stepper_dec_mm+0x88>)
 80014bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <move_stepper_dec_mm+0x88>)
 80014ca:	801a      	strh	r2, [r3, #0]
 80014cc:	e00a      	b.n	80014e4 <move_stepper_dec_mm+0x44>
	}else{

		open_loop_motor_position -= dec_mm;
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <move_stepper_dec_mm+0x88>)
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <move_stepper_dec_mm+0x88>)
 80014e2:	801a      	strh	r2, [r3, #0]

	}
	move_stepper((uint32_t)(dec_mm/DMILLIM_USTEP_CONSTANT));
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff f82d 	bl	8000544 <__aeabi_ui2d>
 80014ea:	a30b      	add	r3, pc, #44	; (adr r3, 8001518 <move_stepper_dec_mm+0x78>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9cc 	bl	800088c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb36 	bl	8000b6c <__aeabi_d2uiz>
 8001500:	4603      	mov	r3, r0
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff8e 	bl	8001424 <move_stepper>
	moving = 0;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <move_stepper_dec_mm+0x80>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	4c327ffc 	.word	0x4c327ffc
 800151c:	3f89a8c1 	.word	0x3f89a8c1
 8001520:	2000009e 	.word	0x2000009e
 8001524:	200000a4 	.word	0x200000a4
 8001528:	200000a0 	.word	0x200000a0

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001532:	f001 fa58 	bl	80029e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f88f 	bl	8001658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153a:	f7ff fcb3 	bl	8000ea4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800153e:	f001 f993 	bl	8002868 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001542:	f001 f863 	bl	800260c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001546:	f001 f8b5 	bl	80026b4 <MX_TIM4_Init>
  MX_I2C2_Init();
 800154a:	f7ff fd47 	bl	8000fdc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800154e:	2100      	movs	r1, #0
 8001550:	4838      	ldr	r0, [pc, #224]	; (8001634 <main+0x108>)
 8001552:	f003 fd39 	bl	8004fc8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001556:	2100      	movs	r1, #0
 8001558:	4837      	ldr	r0, [pc, #220]	; (8001638 <main+0x10c>)
 800155a:	f003 fd35 	bl	8004fc8 <HAL_TIM_IC_Start_IT>


  HAL_UART_Receive_IT(&huart2, &cmd_char, 1);
 800155e:	2201      	movs	r2, #1
 8001560:	4936      	ldr	r1, [pc, #216]	; (800163c <main+0x110>)
 8001562:	4837      	ldr	r0, [pc, #220]	; (8001640 <main+0x114>)
 8001564:	f004 fc52 	bl	8005e0c <HAL_UART_Receive_IT>
  si5351_Init();
 8001568:	f000 f9c2 	bl	80018f0 <si5351_Init>
  si5351_setupPLLInt(SI5351_PLL_A, 32);
 800156c:	2120      	movs	r1, #32
 800156e:	2000      	movs	r0, #0
 8001570:	f000 fa74 	bl	8001a5c <si5351_setupPLLInt>
  si5351_setupMultisynth(0, SI5351_PLL_A, 4, 1000-4, 1);
 8001574:	2301      	movs	r3, #1
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	f44f 7379 	mov.w	r3, #996	; 0x3e4
 800157c:	2204      	movs	r2, #4
 800157e:	2100      	movs	r1, #0
 8001580:	2000      	movs	r0, #0
 8001582:	f000 fcd1 	bl	8001f28 <si5351_setupMultisynth>
  si5351_setupRdiv(0, SI5351_R_DIV_8);
 8001586:	2103      	movs	r1, #3
 8001588:	2000      	movs	r0, #0
 800158a:	f000 fc45 	bl	8001e18 <si5351_setupRdiv>
  si5351_enableOutputs(0xFF);  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800158e:	20ff      	movs	r0, #255	; 0xff
 8001590:	f000 ff02 	bl	8002398 <si5351_enableOutputs>
 8001594:	2100      	movs	r1, #0
 8001596:	4827      	ldr	r0, [pc, #156]	; (8001634 <main+0x108>)
 8001598:	f003 fd16 	bl	8004fc8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800159c:	2100      	movs	r1, #0
 800159e:	4826      	ldr	r0, [pc, #152]	; (8001638 <main+0x10c>)
 80015a0:	f003 fd12 	bl	8004fc8 <HAL_TIM_IC_Start_IT>


  HAL_UART_Receive_IT(&huart2, &cmd_char, 1);
 80015a4:	2201      	movs	r2, #1
 80015a6:	4925      	ldr	r1, [pc, #148]	; (800163c <main+0x110>)
 80015a8:	4825      	ldr	r0, [pc, #148]	; (8001640 <main+0x114>)
 80015aa:	f004 fc2f 	bl	8005e0c <HAL_UART_Receive_IT>
  si5351_Init();
 80015ae:	f000 f99f 	bl	80018f0 <si5351_Init>
  si5351_setupPLLInt(SI5351_PLL_A, 32);
 80015b2:	2120      	movs	r1, #32
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 fa51 	bl	8001a5c <si5351_setupPLLInt>
  si5351_setupMultisynth(0, SI5351_PLL_A, 4, 1000-4, 1);
 80015ba:	2301      	movs	r3, #1
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	f44f 7379 	mov.w	r3, #996	; 0x3e4
 80015c2:	2204      	movs	r2, #4
 80015c4:	2100      	movs	r1, #0
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 fcae 	bl	8001f28 <si5351_setupMultisynth>
  si5351_setupRdiv(0, SI5351_R_DIV_8);
 80015cc:	2103      	movs	r1, #3
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 fc22 	bl	8001e18 <si5351_setupRdiv>
  si5351_enableOutputs(0xFF);
 80015d4:	20ff      	movs	r0, #255	; 0xff
 80015d6:	f000 fedf 	bl	8002398 <si5351_enableOutputs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 80015da:	2064      	movs	r0, #100	; 0x64
 80015dc:	f001 fa74 	bl	8002ac8 <HAL_Delay>
	  HCSR04_trigger();
 80015e0:	f7ff ff0c 	bl	80013fc <HCSR04_trigger>
	  move_mot = !HAL_GPIO_ReadPin(PLC_EN_MOT_GPIO_Port, PLC_EN_MOT_Pin);
 80015e4:	2101      	movs	r1, #1
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <main+0x118>)
 80015e8:	f001 fde2 	bl	80031b0 <HAL_GPIO_ReadPin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf0c      	ite	eq
 80015f2:	2301      	moveq	r3, #1
 80015f4:	2300      	movne	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <main+0x11c>)
 80015fc:	701a      	strb	r2, [r3, #0]
	  direction = HAL_GPIO_ReadPin(PLC_DIRECTION_GPIO_Port, PLC_DIRECTION_Pin);
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001606:	f001 fdd3 	bl	80031b0 <HAL_GPIO_ReadPin>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <main+0x120>)
 8001610:	701a      	strb	r2, [r3, #0]
	  if(move_mot&&(!motor_moved)){
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <main+0x11c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0df      	beq.n	80015da <main+0xae>
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <main+0x124>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1db      	bne.n	80015da <main+0xae>

		  move_stepper_dec_mm(magic_number);
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <main+0x128>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff3a 	bl	80014a0 <move_stepper_dec_mm>
		  motor_moved = 1;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <main+0x124>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 8001632:	e7d2      	b.n	80015da <main+0xae>
 8001634:	20000184 	.word	0x20000184
 8001638:	20000138 	.word	0x20000138
 800163c:	200000a5 	.word	0x200000a5
 8001640:	200001d0 	.word	0x200001d0
 8001644:	48000400 	.word	0x48000400
 8001648:	200000a2 	.word	0x200000a2
 800164c:	200000a4 	.word	0x200000a4
 8001650:	200000a3 	.word	0x200000a3
 8001654:	2000009c 	.word	0x2000009c

08001658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0a4      	sub	sp, #144	; 0x90
 800165c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001662:	2238      	movs	r2, #56	; 0x38
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f006 f8d6 	bl	8007818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2244      	movs	r2, #68	; 0x44
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f006 f8c8 	bl	8007818 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001688:	f44f 7000 	mov.w	r0, #512	; 0x200
 800168c:	f002 fc6c 	bl	8003f68 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001690:	2302      	movs	r3, #2
 8001692:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001698:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a2:	2302      	movs	r3, #2
 80016a4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 15;
 80016aa:	230f      	movs	r3, #15
 80016ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fd02 	bl	80040d0 <HAL_RCC_OscConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80016d2:	f000 f907 	bl	80018e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d6:	230f      	movs	r3, #15
 80016d8:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016da:	2303      	movs	r3, #3
 80016dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016ee:	2101      	movs	r1, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 f805 	bl	8004700 <HAL_RCC_ClockConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80016fc:	f000 f8f2 	bl	80018e4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2;
 8001700:	2382      	movs	r3, #130	; 0x82
 8001702:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	4618      	mov	r0, r3
 8001710:	f003 fa12 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800171a:	f000 f8e3 	bl	80018e4 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3790      	adds	r7, #144	; 0x90
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	if(cmd_char=='a'){
 8001730:	4b50      	ldr	r3, [pc, #320]	; (8001874 <HAL_UART_RxCpltCallback+0x14c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b61      	cmp	r3, #97	; 0x61
 8001738:	d11d      	bne.n	8001776 <HAL_UART_RxCpltCallback+0x4e>

		char buffer[32] = "";
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]
		int dim = sprintf(buffer,"%d\n",distance);
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <HAL_UART_RxCpltCallback+0x150>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4948      	ldr	r1, [pc, #288]	; (800187c <HAL_UART_RxCpltCallback+0x154>)
 800175c:	4618      	mov	r0, r3
 800175e:	f006 f863 	bl	8007828 <siprintf>
 8001762:	62b8      	str	r0, [r7, #40]	; 0x28
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 8001764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001766:	b29a      	uxth	r2, r3
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	4619      	mov	r1, r3
 800176e:	4844      	ldr	r0, [pc, #272]	; (8001880 <HAL_UART_RxCpltCallback+0x158>)
 8001770:	f004 fac8 	bl	8005d04 <HAL_UART_Transmit_IT>
 8001774:	e074      	b.n	8001860 <HAL_UART_RxCpltCallback+0x138>
		//HAL_TIM_Base_Stop_IT(&htim11);

	}else if(cmd_char=='b'){
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_UART_RxCpltCallback+0x14c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b62      	cmp	r3, #98	; 0x62
 800177e:	d11f      	bne.n	80017c0 <HAL_UART_RxCpltCallback+0x98>
		char buffer[32] = "";
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	619a      	str	r2, [r3, #24]
		int dim = sprintf(buffer,"%d\n",open_loop_motor_position);
 8001798:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <HAL_UART_RxCpltCallback+0x15c>)
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	461a      	mov	r2, r3
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4935      	ldr	r1, [pc, #212]	; (800187c <HAL_UART_RxCpltCallback+0x154>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 f83e 	bl	8007828 <siprintf>
 80017ac:	62f8      	str	r0, [r7, #44]	; 0x2c
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	4831      	ldr	r0, [pc, #196]	; (8001880 <HAL_UART_RxCpltCallback+0x158>)
 80017ba:	f004 faa3 	bl	8005d04 <HAL_UART_Transmit_IT>
 80017be:	e04f      	b.n	8001860 <HAL_UART_RxCpltCallback+0x138>

	}else if(cmd_char =='c'){
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <HAL_UART_RxCpltCallback+0x14c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b63      	cmp	r3, #99	; 0x63
 80017c8:	d11e      	bne.n	8001808 <HAL_UART_RxCpltCallback+0xe0>
		char buffer[32] = "";
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	615a      	str	r2, [r3, #20]
 80017e0:	619a      	str	r2, [r3, #24]
		int dim = sprintf(buffer,"%d\n",moving);
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_UART_RxCpltCallback+0x160>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4923      	ldr	r1, [pc, #140]	; (800187c <HAL_UART_RxCpltCallback+0x154>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f006 f81a 	bl	8007828 <siprintf>
 80017f4:	6338      	str	r0, [r7, #48]	; 0x30
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	4619      	mov	r1, r3
 8001800:	481f      	ldr	r0, [pc, #124]	; (8001880 <HAL_UART_RxCpltCallback+0x158>)
 8001802:	f004 fa7f 	bl	8005d04 <HAL_UART_Transmit_IT>
 8001806:	e02b      	b.n	8001860 <HAL_UART_RxCpltCallback+0x138>

	}else if(cmd_char=='d'){
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_UART_RxCpltCallback+0x14c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d121      	bne.n	8001856 <HAL_UART_RxCpltCallback+0x12e>
		char buffer[32] = "";
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	619a      	str	r2, [r3, #24]
		int dim = sprintf(buffer,"%d\n",magic_number);
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_UART_RxCpltCallback+0x164>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	4911      	ldr	r1, [pc, #68]	; (800187c <HAL_UART_RxCpltCallback+0x154>)
 8001836:	4618      	mov	r0, r3
 8001838:	f005 fff6 	bl	8007828 <siprintf>
 800183c:	6378      	str	r0, [r7, #52]	; 0x34
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4619      	mov	r1, r3
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <HAL_UART_RxCpltCallback+0x158>)
 800184a:	f004 fa5b 	bl	8005d04 <HAL_UART_Transmit_IT>
		motor_moved = 0;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_UART_RxCpltCallback+0x168>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e004      	b.n	8001860 <HAL_UART_RxCpltCallback+0x138>


	}else{

		HAL_UART_Transmit_IT(&huart2, "unknown char\n",16);
 8001856:	2210      	movs	r2, #16
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <HAL_UART_RxCpltCallback+0x16c>)
 800185a:	4809      	ldr	r0, [pc, #36]	; (8001880 <HAL_UART_RxCpltCallback+0x158>)
 800185c:	f004 fa52 	bl	8005d04 <HAL_UART_Transmit_IT>


	}

	HAL_UART_Receive_IT(&huart2, &cmd_char, 1);
 8001860:	2201      	movs	r2, #1
 8001862:	4904      	ldr	r1, [pc, #16]	; (8001874 <HAL_UART_RxCpltCallback+0x14c>)
 8001864:	4806      	ldr	r0, [pc, #24]	; (8001880 <HAL_UART_RxCpltCallback+0x158>)
 8001866:	f004 fad1 	bl	8005e0c <HAL_UART_Receive_IT>
}
 800186a:	bf00      	nop
 800186c:	3738      	adds	r7, #56	; 0x38
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000a5 	.word	0x200000a5
 8001878:	20000090 	.word	0x20000090
 800187c:	080081a0 	.word	0x080081a0
 8001880:	200001d0 	.word	0x200001d0
 8001884:	200000a0 	.word	0x200000a0
 8001888:	2000009e 	.word	0x2000009e
 800188c:	2000009c 	.word	0x2000009c
 8001890:	200000a3 	.word	0x200000a3
 8001894:	080081a4 	.word	0x080081a4

08001898 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]


}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==END_STOPmin_Pin){
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	d105      	bne.n	80018c8 <HAL_GPIO_EXTI_Callback+0x1c>

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x34>)
 80018c2:	f001 fca5 	bl	8003210 <HAL_GPIO_TogglePin>

	}else if(GPIO_Pin == END_STOPmax_Pin){
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}

}
 80018c6:	e007      	b.n	80018d8 <HAL_GPIO_EXTI_Callback+0x2c>
	}else if(GPIO_Pin == END_STOPmax_Pin){
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d104      	bne.n	80018d8 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x34>)
 80018d4:	f001 fc9c 	bl	8003210 <HAL_GPIO_TogglePin>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	48000400 	.word	0x48000400

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>
	...

080018f0 <si5351_Init>:
*/
/**************************************************************************/

extern I2C_HandleTypeDef hi2c2;
err_t si5351_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0

	/*!
	    Constructor
	*/
	  m_si5351Config.initialised     = 0;
 80018f6:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <si5351_Init+0x164>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
	  m_si5351Config.crystalFreq     = SI5351_CRYSTAL_FREQ_25MHZ;
 80018fc:	4b55      	ldr	r3, [pc, #340]	; (8001a54 <si5351_Init+0x164>)
 80018fe:	4a56      	ldr	r2, [pc, #344]	; (8001a58 <si5351_Init+0x168>)
 8001900:	605a      	str	r2, [r3, #4]
	  m_si5351Config.crystalLoad     = SI5351_CRYSTAL_LOAD_10PF;
 8001902:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <si5351_Init+0x164>)
 8001904:	22c0      	movs	r2, #192	; 0xc0
 8001906:	721a      	strb	r2, [r3, #8]
	  m_si5351Config.crystalPPM      = 30;
 8001908:	4b52      	ldr	r3, [pc, #328]	; (8001a54 <si5351_Init+0x164>)
 800190a:	221e      	movs	r2, #30
 800190c:	60da      	str	r2, [r3, #12]
	  m_si5351Config.plla_configured = 0;
 800190e:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <si5351_Init+0x164>)
 8001910:	2200      	movs	r2, #0
 8001912:	741a      	strb	r2, [r3, #16]
	  m_si5351Config.plla_freq       = 0;
 8001914:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <si5351_Init+0x164>)
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
	  m_si5351Config.pllb_configured = 0;
 800191a:	4b4e      	ldr	r3, [pc, #312]	; (8001a54 <si5351_Init+0x164>)
 800191c:	2200      	movs	r2, #0
 800191e:	761a      	strb	r2, [r3, #24]
	  m_si5351Config.pllb_freq       = 0;
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <si5351_Init+0x164>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
	  m_si5351Config.ms0_freq		 = 0;
 8001926:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <si5351_Init+0x164>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
	  m_si5351Config.ms1_freq		 = 0;
 800192c:	4b49      	ldr	r3, [pc, #292]	; (8001a54 <si5351_Init+0x164>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
	  m_si5351Config.ms2_freq		 = 0;
 8001932:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <si5351_Init+0x164>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
	  m_si5351Config.ms0_r_div		 = 0;
 8001938:	4b46      	ldr	r3, [pc, #280]	; (8001a54 <si5351_Init+0x164>)
 800193a:	2200      	movs	r2, #0
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
	  m_si5351Config.ms1_r_div		 = 0;
 800193e:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <si5351_Init+0x164>)
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
	  m_si5351Config.ms2_r_div		 = 0;
 8001944:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <si5351_Init+0x164>)
 8001946:	2200      	movs	r2, #0
 8001948:	635a      	str	r2, [r3, #52]	; 0x34



  /* Disable all outputs setting CLKx_DIS high */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF));
 800194a:	21ff      	movs	r1, #255	; 0xff
 800194c:	2003      	movs	r0, #3
 800194e:	f000 fd47 	bl	80023e0 <si5351_write8>
 8001952:	4603      	mov	r3, r0
 8001954:	82fb      	strh	r3, [r7, #22]
 8001956:	8afb      	ldrh	r3, [r7, #22]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <si5351_Init+0x70>
 800195c:	8afb      	ldrh	r3, [r7, #22]
 800195e:	e074      	b.n	8001a4a <si5351_Init+0x15a>

  /* Power down all output drivers */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, 0x80));
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	2010      	movs	r0, #16
 8001964:	f000 fd3c 	bl	80023e0 <si5351_write8>
 8001968:	4603      	mov	r3, r0
 800196a:	82bb      	strh	r3, [r7, #20]
 800196c:	8abb      	ldrh	r3, [r7, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <si5351_Init+0x86>
 8001972:	8abb      	ldrh	r3, [r7, #20]
 8001974:	e069      	b.n	8001a4a <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, 0x80));
 8001976:	2180      	movs	r1, #128	; 0x80
 8001978:	2011      	movs	r0, #17
 800197a:	f000 fd31 	bl	80023e0 <si5351_write8>
 800197e:	4603      	mov	r3, r0
 8001980:	827b      	strh	r3, [r7, #18]
 8001982:	8a7b      	ldrh	r3, [r7, #18]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <si5351_Init+0x9c>
 8001988:	8a7b      	ldrh	r3, [r7, #18]
 800198a:	e05e      	b.n	8001a4a <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, 0x80));
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	2012      	movs	r0, #18
 8001990:	f000 fd26 	bl	80023e0 <si5351_write8>
 8001994:	4603      	mov	r3, r0
 8001996:	823b      	strh	r3, [r7, #16]
 8001998:	8a3b      	ldrh	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <si5351_Init+0xb2>
 800199e:	8a3b      	ldrh	r3, [r7, #16]
 80019a0:	e053      	b.n	8001a4a <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_19_CLK3_CONTROL, 0x80));
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	2013      	movs	r0, #19
 80019a6:	f000 fd1b 	bl	80023e0 <si5351_write8>
 80019aa:	4603      	mov	r3, r0
 80019ac:	81fb      	strh	r3, [r7, #14]
 80019ae:	89fb      	ldrh	r3, [r7, #14]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <si5351_Init+0xc8>
 80019b4:	89fb      	ldrh	r3, [r7, #14]
 80019b6:	e048      	b.n	8001a4a <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_20_CLK4_CONTROL, 0x80));
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	2014      	movs	r0, #20
 80019bc:	f000 fd10 	bl	80023e0 <si5351_write8>
 80019c0:	4603      	mov	r3, r0
 80019c2:	81bb      	strh	r3, [r7, #12]
 80019c4:	89bb      	ldrh	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <si5351_Init+0xde>
 80019ca:	89bb      	ldrh	r3, [r7, #12]
 80019cc:	e03d      	b.n	8001a4a <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_21_CLK5_CONTROL, 0x80));
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	2015      	movs	r0, #21
 80019d2:	f000 fd05 	bl	80023e0 <si5351_write8>
 80019d6:	4603      	mov	r3, r0
 80019d8:	817b      	strh	r3, [r7, #10]
 80019da:	897b      	ldrh	r3, [r7, #10]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <si5351_Init+0xf4>
 80019e0:	897b      	ldrh	r3, [r7, #10]
 80019e2:	e032      	b.n	8001a4a <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_22_CLK6_CONTROL, 0x80));
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	2016      	movs	r0, #22
 80019e8:	f000 fcfa 	bl	80023e0 <si5351_write8>
 80019ec:	4603      	mov	r3, r0
 80019ee:	813b      	strh	r3, [r7, #8]
 80019f0:	893b      	ldrh	r3, [r7, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <si5351_Init+0x10a>
 80019f6:	893b      	ldrh	r3, [r7, #8]
 80019f8:	e027      	b.n	8001a4a <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_23_CLK7_CONTROL, 0x80));
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	2017      	movs	r0, #23
 80019fe:	f000 fcef 	bl	80023e0 <si5351_write8>
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <si5351_Init+0x120>
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	e01c      	b.n	8001a4a <si5351_Init+0x15a>

  /* Set the load capacitance for the XTAL */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE,
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <si5351_Init+0x164>)
 8001a12:	7a1b      	ldrb	r3, [r3, #8]
 8001a14:	4619      	mov	r1, r3
 8001a16:	20b7      	movs	r0, #183	; 0xb7
 8001a18:	f000 fce2 	bl	80023e0 <si5351_write8>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	80bb      	strh	r3, [r7, #4]
 8001a20:	88bb      	ldrh	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <si5351_Init+0x13a>
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	e00f      	b.n	8001a4a <si5351_Init+0x15a>
     By default, ClockBuilder Desktop sets this register to 0x18.
     Note that the least significant nibble must remain 0x8, but the most
     significant nibble may be modified to suit your needs. */

  /* Reset the PLL config fields just in case we call init again */
  m_si5351Config.plla_configured = 0;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <si5351_Init+0x164>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	741a      	strb	r2, [r3, #16]
  m_si5351Config.plla_freq = 0;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <si5351_Init+0x164>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  m_si5351Config.pllb_configured = 0;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <si5351_Init+0x164>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	761a      	strb	r2, [r3, #24]
  m_si5351Config.pllb_freq = 0;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <si5351_Init+0x164>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]

  /* All done! */
  m_si5351Config.initialised = 1;
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <si5351_Init+0x164>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]

  return ERROR_NONE;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000100 	.word	0x20000100
 8001a58:	017d7840 	.word	0x017d7840

08001a5c <si5351_setupPLLInt>:
                - SI5351_PLL_B
  @param  mult  The PLL integer multiplier (must be between 15 and 90)
*/
/**************************************************************************/
err_t si5351_setupPLLInt(si5351PLL_t pll, uint8_t mult)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	460a      	mov	r2, r1
 8001a66:	71fb      	strb	r3, [r7, #7]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	71bb      	strb	r3, [r7, #6]
  return si5351_setupPLL(pll, mult, 0, 1);
 8001a6c:	79b9      	ldrb	r1, [r7, #6]
 8001a6e:	79f8      	ldrb	r0, [r7, #7]
 8001a70:	2301      	movs	r3, #1
 8001a72:	2200      	movs	r2, #0
 8001a74:	f000 f806 	bl	8001a84 <si5351_setupPLL>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <si5351_setupPLL>:
/**************************************************************************/
err_t si5351_setupPLL(si5351PLL_t pll,
                                uint8_t     mult,
                                uint32_t    num,
                                uint32_t    denom)
{
 8001a84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a88:	b08e      	sub	sp, #56	; 0x38
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60ba      	str	r2, [r7, #8]
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	4603      	mov	r3, r0
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	460b      	mov	r3, r1
 8001a96:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* PLL config register P1 */
  uint32_t P2;	     /* PLL config register P2 */
  uint32_t P3;	     /* PLL config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED );
 8001a98:	4ba5      	ldr	r3, [pc, #660]	; (8001d30 <si5351_setupPLL+0x2ac>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <si5351_setupPLL+0x20>
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	e1b2      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT( (mult > 14) && (mult < 91), ERROR_INVALIDPARAMETER ); /* mult = 15..90 */
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	2b0e      	cmp	r3, #14
 8001aa8:	d902      	bls.n	8001ab0 <si5351_setupPLL+0x2c>
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	2b5a      	cmp	r3, #90	; 0x5a
 8001aae:	d901      	bls.n	8001ab4 <si5351_setupPLL+0x30>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	e1aa      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT( denom > 0,                  ERROR_INVALIDPARAMETER ); /* Avoid divide by zero */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <si5351_setupPLL+0x3a>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e1a5      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ac4:	d301      	bcc.n	8001aca <si5351_setupPLL+0x46>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e19f      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad0:	d301      	bcc.n	8001ad6 <si5351_setupPLL+0x52>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e199      	b.n	8001e0a <si5351_setupPLL+0x386>
   *
   * 	P3[19:0] = denom
   */

  /* Set the main PLL config registers */
  if (num == 0)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d108      	bne.n	8001aee <si5351_setupPLL+0x6a>
  {
    /* Integer mode */
    P1 = 128 * mult - 512;
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	01db      	lsls	r3, r3, #7
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
    P2 = num;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
    P3 = denom;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aec:	e074      	b.n	8001bd8 <si5351_setupPLL+0x154>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * mult + floor(128 * ((float)num/(float)denom)) - 512);
 8001aee:	7bbb      	ldrb	r3, [r7, #14]
 8001af0:	01db      	lsls	r3, r3, #7
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd36 	bl	8000564 <__aeabi_i2d>
 8001af8:	4604      	mov	r4, r0
 8001afa:	460d      	mov	r5, r1
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b14:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001d34 <si5351_setupPLL+0x2b0>
 8001b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1c:	ee17 0a90 	vmov	r0, s15
 8001b20:	f7fe fd32 	bl	8000588 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	ec43 2b10 	vmov	d0, r2, r3
 8001b2c:	f006 faac 	bl	8008088 <floor>
 8001b30:	ec53 2b10 	vmov	r2, r3, d0
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe fbc8 	bl	80002cc <__adddf3>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001b4c:	f7fe fbbc 	bl	80002c8 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff f808 	bl	8000b6c <__aeabi_d2uiz>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	01db      	lsls	r3, r3, #7
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fced 	bl	8000544 <__aeabi_ui2d>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	460d      	mov	r5, r1
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe fce8 	bl	8000544 <__aeabi_ui2d>
 8001b74:	4680      	mov	r8, r0
 8001b76:	4689      	mov	r9, r1
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b90:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001d34 <si5351_setupPLL+0x2b0>
 8001b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b98:	ee17 0a90 	vmov	r0, s15
 8001b9c:	f7fe fcf4 	bl	8000588 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	ec43 2b10 	vmov	d0, r2, r3
 8001ba8:	f006 fa6e 	bl	8008088 <floor>
 8001bac:	ec53 2b10 	vmov	r2, r3, d0
 8001bb0:	4640      	mov	r0, r8
 8001bb2:	4649      	mov	r1, r9
 8001bb4:	f7fe fd40 	bl	8000638 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fb82 	bl	80002c8 <__aeabi_dsub>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe ffce 	bl	8000b6c <__aeabi_d2uiz>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
    P3 = denom;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <si5351_setupPLL+0x15e>
 8001bde:	231a      	movs	r3, #26
 8001be0:	e000      	b.n	8001be4 <si5351_setupPLL+0x160>
 8001be2:	2322      	movs	r3, #34	; 0x22
 8001be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* The datasheet is a nightmare of typos and inconsistencies here! */
  ASSERT_STATUS( si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8));
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fbf3 	bl	80023e0 <si5351_write8>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	853b      	strh	r3, [r7, #40]	; 0x28
 8001bfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <si5351_setupPLL+0x184>
 8001c04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c06:	e100      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+1, (P3 & 0x000000FF)));
 8001c08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fbe2 	bl	80023e0 <si5351_write8>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <si5351_setupPLL+0x1a6>
 8001c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c28:	e0ef      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16));
 8001c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c2e:	3302      	adds	r3, #2
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f000 fbcd 	bl	80023e0 <si5351_write8>
 8001c46:	4603      	mov	r3, r0
 8001c48:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <si5351_setupPLL+0x1d0>
 8001c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c52:	e0da      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8));
 8001c54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c58:	3303      	adds	r3, #3
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4619      	mov	r1, r3
 8001c64:	4610      	mov	r0, r2
 8001c66:	f000 fbbb 	bl	80023e0 <si5351_write8>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <si5351_setupPLL+0x1f4>
 8001c74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c76:	e0c8      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+4, (P1 & 0x000000FF)));
 8001c78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fbaa 	bl	80023e0 <si5351_write8>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	843b      	strh	r3, [r7, #32]
 8001c90:	8c3b      	ldrh	r3, [r7, #32]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <si5351_setupPLL+0x216>
 8001c96:	8c3b      	ldrh	r3, [r7, #32]
 8001c98:	e0b7      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) ));
 8001c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c9e:	3305      	adds	r3, #5
 8001ca0:	b2d8      	uxtb	r0, r3
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	0b1b      	lsrs	r3, r3, #12
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f023 030f 	bic.w	r3, r3, #15
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f000 fb8e 	bl	80023e0 <si5351_write8>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	83fb      	strh	r3, [r7, #30]
 8001cc8:	8bfb      	ldrh	r3, [r7, #30]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <si5351_setupPLL+0x24e>
 8001cce:	8bfb      	ldrh	r3, [r7, #30]
 8001cd0:	e09b      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8));
 8001cd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cd6:	3306      	adds	r3, #6
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f000 fb7c 	bl	80023e0 <si5351_write8>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	83bb      	strh	r3, [r7, #28]
 8001cec:	8bbb      	ldrh	r3, [r7, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <si5351_setupPLL+0x272>
 8001cf2:	8bbb      	ldrh	r3, [r7, #28]
 8001cf4:	e089      	b.n	8001e0a <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+7, (P2 & 0x000000FF)));
 8001cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cfa:	3307      	adds	r3, #7
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fb6b 	bl	80023e0 <si5351_write8>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	837b      	strh	r3, [r7, #26]
 8001d0e:	8b7b      	ldrh	r3, [r7, #26]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <si5351_setupPLL+0x294>
 8001d14:	8b7b      	ldrh	r3, [r7, #26]
 8001d16:	e078      	b.n	8001e0a <si5351_setupPLL+0x386>

  /* Reset both PLLs */
  ASSERT_STATUS( si5351_write8(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) ));
 8001d18:	21a0      	movs	r1, #160	; 0xa0
 8001d1a:	20b1      	movs	r0, #177	; 0xb1
 8001d1c:	f000 fb60 	bl	80023e0 <si5351_write8>
 8001d20:	4603      	mov	r3, r0
 8001d22:	833b      	strh	r3, [r7, #24]
 8001d24:	8b3b      	ldrh	r3, [r7, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <si5351_setupPLL+0x2b4>
 8001d2a:	8b3b      	ldrh	r3, [r7, #24]
 8001d2c:	e06d      	b.n	8001e0a <si5351_setupPLL+0x386>
 8001d2e:	bf00      	nop
 8001d30:	20000100 	.word	0x20000100
 8001d34:	43000000 	.word	0x43000000

  /* Store the frequency settings for use with the Multisynth helper */
  if (pll == SI5351_PLL_A)
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d132      	bne.n	8001da4 <si5351_setupPLL+0x320>
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <si5351_setupPLL+0x390>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d4a:	7bbb      	ldrb	r3, [r7, #14]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001d68:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d74:	edc7 7a04 	vstr	s15, [r7, #16]
    m_si5351Config.plla_configured = 1; //true
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <si5351_setupPLL+0x390>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	741a      	strb	r2, [r3, #16]
    m_si5351Config.plla_freq = (uint32_t)floor(fvco);
 8001d7e:	6938      	ldr	r0, [r7, #16]
 8001d80:	f7fe fc02 	bl	8000588 <__aeabi_f2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	ec43 2b10 	vmov	d0, r2, r3
 8001d8c:	f006 f97c 	bl	8008088 <floor>
 8001d90:	ec53 2b10 	vmov	r2, r3, d0
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7fe fee8 	bl	8000b6c <__aeabi_d2uiz>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <si5351_setupPLL+0x390>)
 8001da0:	6153      	str	r3, [r2, #20]
 8001da2:	e031      	b.n	8001e08 <si5351_setupPLL+0x384>
  }
  else
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <si5351_setupPLL+0x390>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001dce:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	edc7 7a05 	vstr	s15, [r7, #20]
    m_si5351Config.pllb_configured = 1; //true
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <si5351_setupPLL+0x390>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	761a      	strb	r2, [r3, #24]
    m_si5351Config.pllb_freq = (uint32_t)floor(fvco);
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f7fe fbcf 	bl	8000588 <__aeabi_f2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	ec43 2b10 	vmov	d0, r2, r3
 8001df2:	f006 f949 	bl	8008088 <floor>
 8001df6:	ec53 2b10 	vmov	r2, r3, d0
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe feb5 	bl	8000b6c <__aeabi_d2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <si5351_setupPLL+0x390>)
 8001e06:	61d3      	str	r3, [r2, #28]
  }

  return ERROR_NONE;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3738      	adds	r7, #56	; 0x38
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e14:	20000100 	.word	0x20000100

08001e18 <si5351_setupRdiv>:
{
  return si5351_setupMultisynth(output, pllSource, div, 0, 1);
}


err_t si5351_setupRdiv(uint8_t  output, si5351RDiv_t div) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	460a      	mov	r2, r1
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	4613      	mov	r3, r2
 8001e26:	71bb      	strb	r3, [r7, #6]
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <si5351_setupRdiv+0x1a>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e073      	b.n	8001f1a <si5351_setupRdiv+0x102>
  
  uint8_t Rreg, regval, rDiv;

  if (output == 0) Rreg = SI5351_REGISTER_44_MULTISYNTH0_PARAMETERS_3;
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <si5351_setupRdiv+0x24>
 8001e38:	232c      	movs	r3, #44	; 0x2c
 8001e3a:	73fb      	strb	r3, [r7, #15]
  if (output == 1) Rreg = SI5351_REGISTER_52_MULTISYNTH1_PARAMETERS_3;
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <si5351_setupRdiv+0x2e>
 8001e42:	2334      	movs	r3, #52	; 0x34
 8001e44:	73fb      	strb	r3, [r7, #15]
  if (output == 2) Rreg = SI5351_REGISTER_60_MULTISYNTH2_PARAMETERS_3;
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d101      	bne.n	8001e50 <si5351_setupRdiv+0x38>
 8001e4c:	233c      	movs	r3, #60	; 0x3c
 8001e4e:	73fb      	strb	r3, [r7, #15]

  si5351_read8(Rreg, &regval);
 8001e50:	f107 020c 	add.w	r2, r7, #12
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 faeb 	bl	8002434 <si5351_read8>

  regval &= 0x0F;
 8001e5e:	7b3b      	ldrb	r3, [r7, #12]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	733b      	strb	r3, [r7, #12]
  uint8_t divider = div;
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	737b      	strb	r3, [r7, #13]
  divider &= 0x07;
 8001e6c:	7b7b      	ldrb	r3, [r7, #13]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	737b      	strb	r3, [r7, #13]
  divider <<= 4;
 8001e74:	7b7b      	ldrb	r3, [r7, #13]
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	737b      	strb	r3, [r7, #13]
  regval |= divider;
 8001e7a:	7b3a      	ldrb	r2, [r7, #12]
 8001e7c:	7b7b      	ldrb	r3, [r7, #13]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	733b      	strb	r3, [r7, #12]
  si5351_write8(Rreg, regval);
 8001e84:	7b3a      	ldrb	r2, [r7, #12]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 faa8 	bl	80023e0 <si5351_write8>

  switch(div)
 8001e90:	79bb      	ldrb	r3, [r7, #6]
 8001e92:	2b07      	cmp	r3, #7
 8001e94:	d82a      	bhi.n	8001eec <si5351_setupRdiv+0xd4>
 8001e96:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <si5351_setupRdiv+0x84>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001ebd 	.word	0x08001ebd
 8001ea0:	08001ec3 	.word	0x08001ec3
 8001ea4:	08001ec9 	.word	0x08001ec9
 8001ea8:	08001ecf 	.word	0x08001ecf
 8001eac:	08001ed5 	.word	0x08001ed5
 8001eb0:	08001edb 	.word	0x08001edb
 8001eb4:	08001ee1 	.word	0x08001ee1
 8001eb8:	08001ee7 	.word	0x08001ee7
  {
  case 0:
  rDiv = 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73bb      	strb	r3, [r7, #14]
  break;
 8001ec0:	e014      	b.n	8001eec <si5351_setupRdiv+0xd4>

  case 1:
  rDiv = 2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	73bb      	strb	r3, [r7, #14]
  break;
 8001ec6:	e011      	b.n	8001eec <si5351_setupRdiv+0xd4>

  case 2:
  rDiv = 4;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	73bb      	strb	r3, [r7, #14]
  break;
 8001ecc:	e00e      	b.n	8001eec <si5351_setupRdiv+0xd4>

  case 3:
  rDiv = 8;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	73bb      	strb	r3, [r7, #14]
  break;
 8001ed2:	e00b      	b.n	8001eec <si5351_setupRdiv+0xd4>

  case 4:
  rDiv = 16;
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	73bb      	strb	r3, [r7, #14]
  break;
 8001ed8:	e008      	b.n	8001eec <si5351_setupRdiv+0xd4>

  case 5:
  rDiv = 32;
 8001eda:	2320      	movs	r3, #32
 8001edc:	73bb      	strb	r3, [r7, #14]
  break;
 8001ede:	e005      	b.n	8001eec <si5351_setupRdiv+0xd4>

  case 6:
  rDiv = 64;
 8001ee0:	2340      	movs	r3, #64	; 0x40
 8001ee2:	73bb      	strb	r3, [r7, #14]
  break;
 8001ee4:	e002      	b.n	8001eec <si5351_setupRdiv+0xd4>

  case 7:
  rDiv = 128;
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	73bb      	strb	r3, [r7, #14]
  break;
 8001eea:	bf00      	nop
  }

  switch(output)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d00e      	beq.n	8001f10 <si5351_setupRdiv+0xf8>
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	dc10      	bgt.n	8001f18 <si5351_setupRdiv+0x100>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <si5351_setupRdiv+0xe8>
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d004      	beq.n	8001f08 <si5351_setupRdiv+0xf0>
 8001efe:	e00b      	b.n	8001f18 <si5351_setupRdiv+0x100>
  {
  case 0:
  m_si5351Config.ms0_r_div = rDiv;
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <si5351_setupRdiv+0x10c>)
 8001f04:	62d3      	str	r3, [r2, #44]	; 0x2c
  break;
 8001f06:	e007      	b.n	8001f18 <si5351_setupRdiv+0x100>

  case 1:
  m_si5351Config.ms1_r_div = rDiv;
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <si5351_setupRdiv+0x10c>)
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
  break;
 8001f0e:	e003      	b.n	8001f18 <si5351_setupRdiv+0x100>

  case 2:
  m_si5351Config.ms2_r_div = rDiv;
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <si5351_setupRdiv+0x10c>)
 8001f14:	6353      	str	r3, [r2, #52]	; 0x34
  break;
 8001f16:	bf00      	nop
  }

  return ERROR_NONE;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000100 	.word	0x20000100

08001f28 <si5351_setupMultisynth>:
err_t si5351_setupMultisynth(uint8_t     output,
                                       si5351PLL_t pllSource,
                                       uint32_t    div,
                                       uint32_t    num,
                                       uint32_t    denom)
{
 8001f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f2c:	b08c      	sub	sp, #48	; 0x30
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60ba      	str	r2, [r7, #8]
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* Multisynth config register P1 */
  uint32_t P2;	     /* Multisynth config register P2 */
  uint32_t P3;	     /* Multisynth config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 8001f3c:	4bba      	ldr	r3, [pc, #744]	; (8002228 <si5351_setupMultisynth+0x300>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <si5351_setupMultisynth+0x20>
 8001f44:	2305      	movs	r3, #5
 8001f46:	e21f      	b.n	8002388 <si5351_setupMultisynth+0x460>
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <si5351_setupMultisynth+0x2a>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e21a      	b.n	8002388 <si5351_setupMultisynth+0x460>
  //ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
  //ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */


  /* Make sure the requested PLL has been initialised */
  if (pllSource == SI5351_PLL_A)
 8001f52:	7bbb      	ldrb	r3, [r7, #14]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <si5351_setupMultisynth+0x38>
  {
    ASSERT(m_si5351Config.plla_configured = 1, ERROR_INVALIDPARAMETER);
 8001f58:	4bb3      	ldr	r3, [pc, #716]	; (8002228 <si5351_setupMultisynth+0x300>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	741a      	strb	r2, [r3, #16]
 8001f5e:	e002      	b.n	8001f66 <si5351_setupMultisynth+0x3e>
  }
  else
  {
    ASSERT(m_si5351Config.pllb_configured = 1, ERROR_INVALIDPARAMETER);
 8001f60:	4bb1      	ldr	r3, [pc, #708]	; (8002228 <si5351_setupMultisynth+0x300>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	761a      	strb	r2, [r3, #24]
   *
   * 	P3[19:0] = c
   */

  /* Set the main PLL config registers */
  if (num == 0)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10a      	bne.n	8001f82 <si5351_setupMultisynth+0x5a>
  {
    /* Integer mode */
    P1 = 128 * div - 512;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001f72:	3b04      	subs	r3, #4
 8001f74:	01db      	lsls	r3, r3, #7
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    P2 = num;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    P3 = denom;
 8001f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e074      	b.n	800206c <si5351_setupMultisynth+0x144>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * div + floor(128 * ((float)num/(float)denom)) - 512);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fadc 	bl	8000544 <__aeabi_ui2d>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa8:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800222c <si5351_setupMultisynth+0x304>
 8001fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb0:	ee17 0a90 	vmov	r0, s15
 8001fb4:	f7fe fae8 	bl	8000588 <__aeabi_f2d>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	ec43 2b10 	vmov	d0, r2, r3
 8001fc0:	f006 f862 	bl	8008088 <floor>
 8001fc4:	ec53 2b10 	vmov	r2, r3, d0
 8001fc8:	4620      	mov	r0, r4
 8001fca:	4629      	mov	r1, r5
 8001fcc:	f7fe f97e 	bl	80002cc <__adddf3>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001fe0:	f7fe f972 	bl	80002c8 <__aeabi_dsub>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f7fe fdbe 	bl	8000b6c <__aeabi_d2uiz>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe faa3 	bl	8000544 <__aeabi_ui2d>
 8001ffe:	4604      	mov	r4, r0
 8002000:	460d      	mov	r5, r1
 8002002:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002004:	f7fe fa9e 	bl	8000544 <__aeabi_ui2d>
 8002008:	4680      	mov	r8, r0
 800200a:	4689      	mov	r9, r1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002024:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800222c <si5351_setupMultisynth+0x304>
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	ee17 0a90 	vmov	r0, s15
 8002030:	f7fe faaa 	bl	8000588 <__aeabi_f2d>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	ec43 2b10 	vmov	d0, r2, r3
 800203c:	f006 f824 	bl	8008088 <floor>
 8002040:	ec53 2b10 	vmov	r2, r3, d0
 8002044:	4640      	mov	r0, r8
 8002046:	4649      	mov	r1, r9
 8002048:	f7fe faf6 	bl	8000638 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f7fe f938 	bl	80002c8 <__aeabi_dsub>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fd84 	bl	8000b6c <__aeabi_d2uiz>
 8002064:	4603      	mov	r3, r0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
    P3 = denom;
 8002068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  switch (output)
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d00e      	beq.n	8002096 <si5351_setupMultisynth+0x16e>
 8002078:	2b02      	cmp	r3, #2
 800207a:	dc10      	bgt.n	800209e <si5351_setupMultisynth+0x176>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <si5351_setupMultisynth+0x15e>
 8002080:	2b01      	cmp	r3, #1
 8002082:	d004      	beq.n	800208e <si5351_setupMultisynth+0x166>
 8002084:	e00b      	b.n	800209e <si5351_setupMultisynth+0x176>
  {
    case 0:
      baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8002086:	232a      	movs	r3, #42	; 0x2a
 8002088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      break;
 800208c:	e007      	b.n	800209e <si5351_setupMultisynth+0x176>
    case 1:
      baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800208e:	2332      	movs	r3, #50	; 0x32
 8002090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      break;
 8002094:	e003      	b.n	800209e <si5351_setupMultisynth+0x176>
    case 2:
      baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 8002096:	233a      	movs	r3, #58	; 0x3a
 8002098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      break;
 800209c:	bf00      	nop
  }

  /* Set the MSx config registers */
  si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8);
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f998 	bl	80023e0 <si5351_write8>
  si5351_write8( baseaddr+1, (P3 & 0x000000FF));
 80020b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020b4:	3301      	adds	r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f98e 	bl	80023e0 <si5351_write8>
  si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16);	/* ToDo: Add DIVBY4 (>150MHz) and R0 support (<500kHz) later */
 80020c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020c8:	3302      	adds	r3, #2
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f000 f980 	bl	80023e0 <si5351_write8>
  si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8);
 80020e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020e4:	3303      	adds	r3, #3
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f000 f975 	bl	80023e0 <si5351_write8>
  si5351_write8( baseaddr+4, (P1 & 0x000000FF));
 80020f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020fa:	3304      	adds	r3, #4
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f96b 	bl	80023e0 <si5351_write8>
  si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) );
 800210a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800210e:	3305      	adds	r3, #5
 8002110:	b2d8      	uxtb	r0, r3
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	0b1b      	lsrs	r3, r3, #12
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f023 030f 	bic.w	r3, r3, #15
 800211c:	b2da      	uxtb	r2, r3
 800211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4313      	orrs	r3, r2
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	f000 f956 	bl	80023e0 <si5351_write8>
  si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8);
 8002134:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002138:	3306      	adds	r3, #6
 800213a:	b2da      	uxtb	r2, r3
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f000 f94b 	bl	80023e0 <si5351_write8>
  si5351_write8( baseaddr+7, (P2 & 0x000000FF));
 800214a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800214e:	3307      	adds	r3, #7
 8002150:	b2db      	uxtb	r3, r3
 8002152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f941 	bl	80023e0 <si5351_write8>


  if (pllSource == SI5351_PLL_A)
 800215e:	7bbb      	ldrb	r3, [r7, #14]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d165      	bne.n	8002230 <si5351_setupMultisynth+0x308>
  {
          float fvco = m_si5351Config.plla_freq / (div + ( (float)num / (float)denom ));
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <si5351_setupMultisynth+0x300>)
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8002184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800218e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800219a:	edc7 7a06 	vstr	s15, [r7, #24]
          switch (output)
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d02d      	beq.n	8002200 <si5351_setupMultisynth+0x2d8>
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	f300 80a3 	bgt.w	80022f0 <si5351_setupMultisynth+0x3c8>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <si5351_setupMultisynth+0x28c>
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d013      	beq.n	80021da <si5351_setupMultisynth+0x2b2>
 80021b2:	e09d      	b.n	80022f0 <si5351_setupMultisynth+0x3c8>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 80021b4:	69b8      	ldr	r0, [r7, #24]
 80021b6:	f7fe f9e7 	bl	8000588 <__aeabi_f2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	ec43 2b10 	vmov	d0, r2, r3
 80021c2:	f005 ff61 	bl	8008088 <floor>
 80021c6:	ec53 2b10 	vmov	r2, r3, d0
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fccd 	bl	8000b6c <__aeabi_d2uiz>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <si5351_setupMultisynth+0x300>)
 80021d6:	6213      	str	r3, [r2, #32]
           break;
 80021d8:	e08a      	b.n	80022f0 <si5351_setupMultisynth+0x3c8>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 80021da:	69b8      	ldr	r0, [r7, #24]
 80021dc:	f7fe f9d4 	bl	8000588 <__aeabi_f2d>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	ec43 2b10 	vmov	d0, r2, r3
 80021e8:	f005 ff4e 	bl	8008088 <floor>
 80021ec:	ec53 2b10 	vmov	r2, r3, d0
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fcba 	bl	8000b6c <__aeabi_d2uiz>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <si5351_setupMultisynth+0x300>)
 80021fc:	6253      	str	r3, [r2, #36]	; 0x24
           break;
 80021fe:	e077      	b.n	80022f0 <si5351_setupMultisynth+0x3c8>
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 8002200:	69b8      	ldr	r0, [r7, #24]
 8002202:	f7fe f9c1 	bl	8000588 <__aeabi_f2d>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	ec43 2b10 	vmov	d0, r2, r3
 800220e:	f005 ff3b 	bl	8008088 <floor>
 8002212:	ec53 2b10 	vmov	r2, r3, d0
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f7fe fca7 	bl	8000b6c <__aeabi_d2uiz>
 800221e:	4603      	mov	r3, r0
 8002220:	4a01      	ldr	r2, [pc, #4]	; (8002228 <si5351_setupMultisynth+0x300>)
 8002222:	6293      	str	r3, [r2, #40]	; 0x28
           break;
 8002224:	e064      	b.n	80022f0 <si5351_setupMultisynth+0x3c8>
 8002226:	bf00      	nop
 8002228:	20000100 	.word	0x20000100
 800222c:	43000000 	.word	0x43000000
          }
  }
  else
  {
          float fvco = m_si5351Config.pllb_freq / (div + ( (float)num / (float)denom));
 8002230:	4b58      	ldr	r3, [pc, #352]	; (8002394 <si5351_setupMultisynth+0x46c>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8002250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800225a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800225e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002266:	edc7 7a07 	vstr	s15, [r7, #28]
          switch (output)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d02c      	beq.n	80022ca <si5351_setupMultisynth+0x3a2>
 8002270:	2b02      	cmp	r3, #2
 8002272:	dc3d      	bgt.n	80022f0 <si5351_setupMultisynth+0x3c8>
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <si5351_setupMultisynth+0x356>
 8002278:	2b01      	cmp	r3, #1
 800227a:	d013      	beq.n	80022a4 <si5351_setupMultisynth+0x37c>
 800227c:	e038      	b.n	80022f0 <si5351_setupMultisynth+0x3c8>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 800227e:	69f8      	ldr	r0, [r7, #28]
 8002280:	f7fe f982 	bl	8000588 <__aeabi_f2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	ec43 2b10 	vmov	d0, r2, r3
 800228c:	f005 fefc 	bl	8008088 <floor>
 8002290:	ec53 2b10 	vmov	r2, r3, d0
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f7fe fc68 	bl	8000b6c <__aeabi_d2uiz>
 800229c:	4603      	mov	r3, r0
 800229e:	4a3d      	ldr	r2, [pc, #244]	; (8002394 <si5351_setupMultisynth+0x46c>)
 80022a0:	6213      	str	r3, [r2, #32]
           break;
 80022a2:	e025      	b.n	80022f0 <si5351_setupMultisynth+0x3c8>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 80022a4:	69f8      	ldr	r0, [r7, #28]
 80022a6:	f7fe f96f 	bl	8000588 <__aeabi_f2d>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	ec43 2b10 	vmov	d0, r2, r3
 80022b2:	f005 fee9 	bl	8008088 <floor>
 80022b6:	ec53 2b10 	vmov	r2, r3, d0
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f7fe fc55 	bl	8000b6c <__aeabi_d2uiz>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4a33      	ldr	r2, [pc, #204]	; (8002394 <si5351_setupMultisynth+0x46c>)
 80022c6:	6253      	str	r3, [r2, #36]	; 0x24
           break;
 80022c8:	e012      	b.n	80022f0 <si5351_setupMultisynth+0x3c8>
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 80022ca:	69f8      	ldr	r0, [r7, #28]
 80022cc:	f7fe f95c 	bl	8000588 <__aeabi_f2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	ec43 2b10 	vmov	d0, r2, r3
 80022d8:	f005 fed6 	bl	8008088 <floor>
 80022dc:	ec53 2b10 	vmov	r2, r3, d0
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fc42 	bl	8000b6c <__aeabi_d2uiz>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4a2a      	ldr	r2, [pc, #168]	; (8002394 <si5351_setupMultisynth+0x46c>)
 80022ec:	6293      	str	r3, [r2, #40]	; 0x28
           break;
 80022ee:	bf00      	nop
  }



  /* Configure the clk control and enable the output */
  uint8_t clkControlReg = 0x0F;                             /* 8mA drive strength, MS0 as CLK0 source, Clock not inverted, powered up */
 80022f0:	230f      	movs	r3, #15
 80022f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  if (pllSource == SI5351_PLL_B) clkControlReg |= (1 << 5); /* Uses PLLB */
 80022f6:	7bbb      	ldrb	r3, [r7, #14]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <si5351_setupMultisynth+0x3e0>
 80022fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002300:	f043 0320 	orr.w	r3, r3, #32
 8002304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  if (num == 0) clkControlReg |= (1 << 6);                  /* Integer mode */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <si5351_setupMultisynth+0x3f2>
 800230e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002316:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  switch (output)
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d020      	beq.n	8002362 <si5351_setupMultisynth+0x43a>
 8002320:	2b02      	cmp	r3, #2
 8002322:	dc30      	bgt.n	8002386 <si5351_setupMultisynth+0x45e>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <si5351_setupMultisynth+0x406>
 8002328:	2b01      	cmp	r3, #1
 800232a:	d00d      	beq.n	8002348 <si5351_setupMultisynth+0x420>
 800232c:	e02b      	b.n	8002386 <si5351_setupMultisynth+0x45e>
  {
    case 0:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, clkControlReg));
 800232e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002332:	4619      	mov	r1, r3
 8002334:	2010      	movs	r0, #16
 8002336:	f000 f853 	bl	80023e0 <si5351_write8>
 800233a:	4603      	mov	r3, r0
 800233c:	827b      	strh	r3, [r7, #18]
 800233e:	8a7b      	ldrh	r3, [r7, #18]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <si5351_setupMultisynth+0x454>
 8002344:	8a7b      	ldrh	r3, [r7, #18]
 8002346:	e01f      	b.n	8002388 <si5351_setupMultisynth+0x460>
      break;
    case 1:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, clkControlReg));
 8002348:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800234c:	4619      	mov	r1, r3
 800234e:	2011      	movs	r0, #17
 8002350:	f000 f846 	bl	80023e0 <si5351_write8>
 8002354:	4603      	mov	r3, r0
 8002356:	82bb      	strh	r3, [r7, #20]
 8002358:	8abb      	ldrh	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d010      	beq.n	8002380 <si5351_setupMultisynth+0x458>
 800235e:	8abb      	ldrh	r3, [r7, #20]
 8002360:	e012      	b.n	8002388 <si5351_setupMultisynth+0x460>
      break;
    case 2:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg));
 8002362:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002366:	4619      	mov	r1, r3
 8002368:	2012      	movs	r0, #18
 800236a:	f000 f839 	bl	80023e0 <si5351_write8>
 800236e:	4603      	mov	r3, r0
 8002370:	82fb      	strh	r3, [r7, #22]
 8002372:	8afb      	ldrh	r3, [r7, #22]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <si5351_setupMultisynth+0x45c>
 8002378:	8afb      	ldrh	r3, [r7, #22]
 800237a:	e005      	b.n	8002388 <si5351_setupMultisynth+0x460>
      break;
 800237c:	bf00      	nop
 800237e:	e002      	b.n	8002386 <si5351_setupMultisynth+0x45e>
      break;
 8002380:	bf00      	nop
 8002382:	e000      	b.n	8002386 <si5351_setupMultisynth+0x45e>
      break;
 8002384:	bf00      	nop
  }

  return ERROR_NONE;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3730      	adds	r7, #48	; 0x30
 800238c:	46bd      	mov	sp, r7
 800238e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002392:	bf00      	nop
 8002394:	20000100 	.word	0x20000100

08002398 <si5351_enableOutputs>:
/*!
    @brief  Enables or disables all clock outputs
*/
/**************************************************************************/
err_t si5351_enableOutputs(uint8_t enabled)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  /* Make sure we've called init first */
  ASSERT(m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <si5351_enableOutputs+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <si5351_enableOutputs+0x16>
 80023aa:	2305      	movs	r3, #5
 80023ac:	e011      	b.n	80023d2 <si5351_enableOutputs+0x3a>

  /* Enabled desired outputs (see Register 3) */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, enabled ? 0x00: 0xFF));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <si5351_enableOutputs+0x20>
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <si5351_enableOutputs+0x22>
 80023b8:	23ff      	movs	r3, #255	; 0xff
 80023ba:	4619      	mov	r1, r3
 80023bc:	2003      	movs	r0, #3
 80023be:	f000 f80f 	bl	80023e0 <si5351_write8>
 80023c2:	4603      	mov	r3, r0
 80023c4:	81fb      	strh	r3, [r7, #14]
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <si5351_enableOutputs+0x38>
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	e000      	b.n	80023d2 <si5351_enableOutputs+0x3a>

  return ERROR_NONE;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000100 	.word	0x20000100

080023e0 <si5351_write8>:
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_write8 (uint8_t reg, uint8_t value)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af04      	add	r7, sp, #16
 80023e6:	4603      	mov	r3, r0
 80023e8:	460a      	mov	r2, r1
 80023ea:	71fb      	strb	r3, [r7, #7]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
	while (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 80023f4:	bf00      	nop
 80023f6:	2364      	movs	r3, #100	; 0x64
 80023f8:	2203      	movs	r2, #3
 80023fa:	21c0      	movs	r1, #192	; 0xc0
 80023fc:	480c      	ldr	r0, [pc, #48]	; (8002430 <si5351_write8+0x50>)
 80023fe:	f001 f9f7 	bl	80037f0 <HAL_I2C_IsDeviceReady>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f6      	bne.n	80023f6 <si5351_write8+0x16>

    status = HAL_I2C_Mem_Write(&hi2c2,							// i2c handle
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	b29a      	uxth	r2, r3
 800240c:	2364      	movs	r3, #100	; 0x64
 800240e:	9302      	str	r3, [sp, #8]
 8002410:	2301      	movs	r3, #1
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	1dbb      	adds	r3, r7, #6
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2301      	movs	r3, #1
 800241a:	21c0      	movs	r1, #192	; 0xc0
 800241c:	4804      	ldr	r0, [pc, #16]	; (8002430 <si5351_write8+0x50>)
 800241e:	f000 ffb9 	bl	8003394 <HAL_I2C_Mem_Write>
 8002422:	4603      	mov	r3, r0
 8002424:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200000b4 	.word	0x200000b4

08002434 <si5351_read8>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_read8(uint8_t reg, uint8_t *value)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af04      	add	r7, sp, #16
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8002444:	bf00      	nop
 8002446:	2364      	movs	r3, #100	; 0x64
 8002448:	2203      	movs	r2, #3
 800244a:	21c0      	movs	r1, #192	; 0xc0
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <si5351_read8+0x4c>)
 800244e:	f001 f9cf 	bl	80037f0 <HAL_I2C_IsDeviceReady>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f6      	bne.n	8002446 <si5351_read8+0x12>

    status = HAL_I2C_Mem_Read(&hi2c2,							// i2c handle
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	b29a      	uxth	r2, r3
 800245c:	2364      	movs	r3, #100	; 0x64
 800245e:	9302      	str	r3, [sp, #8]
 8002460:	2301      	movs	r3, #1
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	463b      	mov	r3, r7
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	21c0      	movs	r1, #192	; 0xc0
 800246c:	4804      	ldr	r0, [pc, #16]	; (8002480 <si5351_read8+0x4c>)
 800246e:	f001 f8a5 	bl	80035bc <HAL_I2C_Mem_Read>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200000b4 	.word	0x200000b4

08002484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_MspInit+0x48>)
 800248c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248e:	4a0f      	ldr	r2, [pc, #60]	; (80024cc <HAL_MspInit+0x48>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6613      	str	r3, [r2, #96]	; 0x60
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_MspInit+0x48>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_MspInit+0x48>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_MspInit+0x48>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6593      	str	r3, [r2, #88]	; 0x58
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_MspInit+0x48>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80024ba:	2005      	movs	r0, #5
 80024bc:	f000 fbf6 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024c0:	f001 fdf6 	bl	80040b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000

080024d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <NMI_Handler+0x4>

080024d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <HardFault_Handler+0x4>

080024dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <MemManage_Handler+0x4>

080024e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <BusFault_Handler+0x4>

080024e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <UsageFault_Handler+0x4>

080024ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251c:	f000 fab6 	bl	8002a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002528:	2010      	movs	r0, #16
 800252a:	f000 fe8b 	bl	8003244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}

08002532 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002536:	2020      	movs	r0, #32
 8002538:	f000 fe84 	bl	8003244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002544:	4802      	ldr	r0, [pc, #8]	; (8002550 <TIM3_IRQHandler+0x10>)
 8002546:	f002 fe7b 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000184 	.word	0x20000184

08002554 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <TIM4_IRQHandler+0x10>)
 800255a:	f002 fe71 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000138 	.word	0x20000138

08002568 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <USART2_IRQHandler+0x10>)
 800256e:	f003 fc93 	bl	8005e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200001d0 	.word	0x200001d0

0800257c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <_sbrk+0x5c>)
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <_sbrk+0x60>)
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <_sbrk+0x64>)
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <_sbrk+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d207      	bcs.n	80025bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ac:	f005 f90a 	bl	80077c4 <__errno>
 80025b0:	4603      	mov	r3, r0
 80025b2:	220c      	movs	r2, #12
 80025b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	e009      	b.n	80025d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <_sbrk+0x64>)
 80025cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20008000 	.word	0x20008000
 80025dc:	00000400 	.word	0x00000400
 80025e0:	200000a8 	.word	0x200000a8
 80025e4:	20000278 	.word	0x20000278

080025e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <SystemInit+0x20>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <SystemInit+0x20>)
 80025f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <MX_TIM3_Init+0xa0>)
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <MX_TIM3_Init+0xa4>)
 800262e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_TIM3_Init+0xa0>)
 8002632:	223b      	movs	r2, #59	; 0x3b
 8002634:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <MX_TIM3_Init+0xa0>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_TIM3_Init+0xa0>)
 800263e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002642:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_TIM3_Init+0xa0>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_TIM3_Init+0xa0>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002650:	4816      	ldr	r0, [pc, #88]	; (80026ac <MX_TIM3_Init+0xa0>)
 8002652:	f002 fc61 	bl	8004f18 <HAL_TIM_IC_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800265c:	f7ff f942 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	480f      	ldr	r0, [pc, #60]	; (80026ac <MX_TIM3_Init+0xa0>)
 8002670:	f003 fa30 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800267a:	f7ff f933 	bl	80018e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002682:	2301      	movs	r3, #1
 8002684:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	2200      	movs	r2, #0
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_TIM3_Init+0xa0>)
 8002696:	f002 ff52 	bl	800553e <HAL_TIM_IC_ConfigChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80026a0:	f7ff f920 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000184 	.word	0x20000184
 80026b0:	40000400 	.word	0x40000400

080026b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <MX_TIM4_Init+0xa4>)
 80026d4:	4a21      	ldr	r2, [pc, #132]	; (800275c <MX_TIM4_Init+0xa8>)
 80026d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59999;
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <MX_TIM4_Init+0xa4>)
 80026da:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80026de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <MX_TIM4_Init+0xa4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <MX_TIM4_Init+0xa4>)
 80026e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <MX_TIM4_Init+0xa4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <MX_TIM4_Init+0xa4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80026fa:	4817      	ldr	r0, [pc, #92]	; (8002758 <MX_TIM4_Init+0xa4>)
 80026fc:	f002 fc0c 	bl	8004f18 <HAL_TIM_IC_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002706:	f7ff f8ed 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	480f      	ldr	r0, [pc, #60]	; (8002758 <MX_TIM4_Init+0xa4>)
 800271a:	f003 f9db 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002724:	f7ff f8de 	bl	80018e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800272c:	2301      	movs	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	2200      	movs	r2, #0
 800273c:	4619      	mov	r1, r3
 800273e:	4806      	ldr	r0, [pc, #24]	; (8002758 <MX_TIM4_Init+0xa4>)
 8002740:	f002 fefd 	bl	800553e <HAL_TIM_IC_ConfigChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800274a:	f7ff f8cb 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000138 	.word	0x20000138
 800275c:	40000800 	.word	0x40000800

08002760 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	; 0x30
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a37      	ldr	r2, [pc, #220]	; (800285c <HAL_TIM_IC_MspInit+0xfc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d131      	bne.n	80027e6 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002782:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	4a36      	ldr	r2, [pc, #216]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6593      	str	r3, [r2, #88]	; 0x58
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4a30      	ldr	r2, [pc, #192]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a6:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HCSR_ECHO_Pin;
 80027b2:	2340      	movs	r3, #64	; 0x40
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027c2:	2302      	movs	r3, #2
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HCSR_ECHO_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	4619      	mov	r1, r3
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d0:	f000 fb6c 	bl	8002eac <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2101      	movs	r1, #1
 80027d8:	201d      	movs	r0, #29
 80027da:	f000 fa72 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027de:	201d      	movs	r0, #29
 80027e0:	f000 fa89 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027e4:	e036      	b.n	8002854 <HAL_TIM_IC_MspInit+0xf4>
  else if(tim_icHandle->Instance==TIM4)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <HAL_TIM_IC_MspInit+0x104>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d131      	bne.n	8002854 <HAL_TIM_IC_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6593      	str	r3, [r2, #88]	; 0x58
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_TIM_IC_MspInit+0x100>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PLC_PulsePort_Pin;
 8002820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002832:	230a      	movs	r3, #10
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PLC_PulsePort_GPIO_Port, &GPIO_InitStruct);
 8002836:	f107 031c 	add.w	r3, r7, #28
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002840:	f000 fb34 	bl	8002eac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	201e      	movs	r0, #30
 800284a:	f000 fa3a 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800284e:	201e      	movs	r0, #30
 8002850:	f000 fa51 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
}
 8002854:	bf00      	nop
 8002856:	3730      	adds	r7, #48	; 0x30
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40000400 	.word	0x40000400
 8002860:	40021000 	.word	0x40021000
 8002864:	40000800 	.word	0x40000800

08002868 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 800286e:	4a23      	ldr	r2, [pc, #140]	; (80028fc <MX_USART2_UART_Init+0x94>)
 8002870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 8002874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 800288e:	220c      	movs	r2, #12
 8002890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002892:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028b0:	4811      	ldr	r0, [pc, #68]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 80028b2:	f003 f9d7 	bl	8005c64 <HAL_UART_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028bc:	f7ff f812 	bl	80018e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028c0:	2100      	movs	r1, #0
 80028c2:	480d      	ldr	r0, [pc, #52]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 80028c4:	f004 feb3 	bl	800762e <HAL_UARTEx_SetTxFifoThreshold>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028ce:	f7ff f809 	bl	80018e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d2:	2100      	movs	r1, #0
 80028d4:	4808      	ldr	r0, [pc, #32]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 80028d6:	f004 fee8 	bl	80076aa <HAL_UARTEx_SetRxFifoThreshold>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028e0:	f7ff f800 	bl	80018e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <MX_USART2_UART_Init+0x90>)
 80028e6:	f004 fe69 	bl	80075bc <HAL_UARTEx_DisableFifoMode>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028f0:	f7fe fff8 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200001d0 	.word	0x200001d0
 80028fc:	40004400 	.word	0x40004400

08002900 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_UART_MspInit+0x8c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d130      	bne.n	8002984 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_UART_MspInit+0x90>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_UART_MspInit+0x90>)
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_UART_MspInit+0x90>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_UART_MspInit+0x90>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	4a14      	ldr	r2, [pc, #80]	; (8002990 <HAL_UART_MspInit+0x90>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_UART_MspInit+0x90>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002952:	230c      	movs	r3, #12
 8002954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002962:	2307      	movs	r3, #7
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002970:	f000 fa9c 	bl	8002eac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8002974:	2201      	movs	r2, #1
 8002976:	2101      	movs	r1, #1
 8002978:	2026      	movs	r0, #38	; 0x26
 800297a:	f000 f9a2 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800297e:	2026      	movs	r0, #38	; 0x26
 8002980:	f000 f9b9 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40004400 	.word	0x40004400
 8002990:	40021000 	.word	0x40021000

08002994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002994:	480d      	ldr	r0, [pc, #52]	; (80029cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002996:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002998:	480d      	ldr	r0, [pc, #52]	; (80029d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800299a:	490e      	ldr	r1, [pc, #56]	; (80029d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800299c:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <LoopForever+0xe>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029a0:	e002      	b.n	80029a8 <LoopCopyDataInit>

080029a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a6:	3304      	adds	r3, #4

080029a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029ac:	d3f9      	bcc.n	80029a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80029b0:	4c0b      	ldr	r4, [pc, #44]	; (80029e0 <LoopForever+0x16>)
  movs r3, #0
 80029b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b4:	e001      	b.n	80029ba <LoopFillZerobss>

080029b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b8:	3204      	adds	r2, #4

080029ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029bc:	d3fb      	bcc.n	80029b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029be:	f7ff fe13 	bl	80025e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029c2:	f004 ff05 	bl	80077d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029c6:	f7fe fdb1 	bl	800152c <main>

080029ca <LoopForever>:

LoopForever:
    b LoopForever
 80029ca:	e7fe      	b.n	80029ca <LoopForever>
  ldr   r0, =_estack
 80029cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80029d8:	08008238 	.word	0x08008238
  ldr r2, =_sbss
 80029dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80029e0:	20000274 	.word	0x20000274

080029e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC1_2_IRQHandler>

080029e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 f95b 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029f6:	2000      	movs	r0, #0
 80029f8:	f000 f80e 	bl	8002a18 <HAL_InitTick>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	71fb      	strb	r3, [r7, #7]
 8002a06:	e001      	b.n	8002a0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a08:	f7ff fd3c 	bl	8002484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a0c:	79fb      	ldrb	r3, [r7, #7]

}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_InitTick+0x68>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d022      	beq.n	8002a72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_InitTick+0x6c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_InitTick+0x68>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 f966 	bl	8002d12 <HAL_SYSTICK_Config>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10f      	bne.n	8002a6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	d809      	bhi.n	8002a66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a52:	2200      	movs	r2, #0
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5a:	f000 f932 	bl	8002cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <HAL_InitTick+0x70>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e007      	b.n	8002a76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	e004      	b.n	8002a76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	e001      	b.n	8002a76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000008 	.word	0x20000008
 8002a84:	20000000 	.word	0x20000000
 8002a88:	20000004 	.word	0x20000004

08002a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_IncTick+0x1c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_IncTick+0x20>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_IncTick+0x1c>)
 8002a9c:	6013      	str	r3, [r2, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	20000260 	.word	0x20000260
 8002aac:	20000008 	.word	0x20000008

08002ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_GetTick+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000260 	.word	0x20000260

08002ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff ffee 	bl	8002ab0 <HAL_GetTick>
 8002ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d004      	beq.n	8002aec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_Delay+0x40>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4413      	add	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aec:	bf00      	nop
 8002aee:	f7ff ffdf 	bl	8002ab0 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d8f7      	bhi.n	8002aee <HAL_Delay+0x26>
  {
  }
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000008 	.word	0x20000008

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff29 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd0:	f7ff ff40 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	6978      	ldr	r0, [r7, #20]
 8002cdc:	f7ff ff90 	bl	8002c00 <NVIC_EncodePriority>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff5f 	bl	8002bac <__NVIC_SetPriority>
}
 8002cee:	bf00      	nop
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff33 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ffa4 	bl	8002c68 <SysTick_Config>
 8002d20:	4603      	mov	r3, r0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d005      	beq.n	8002d4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2204      	movs	r2, #4
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e037      	b.n	8002dbe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 020e 	bic.w	r2, r2, #14
 8002d5c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d6c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f003 021f 	and.w	r2, r3, #31
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d9a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00c      	beq.n	8002dbe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002dbc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d00d      	beq.n	8002e10 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2204      	movs	r2, #4
 8002df8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	e047      	b.n	8002ea0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 020e 	bic.w	r2, r2, #14
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
    }
  }
  return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eba:	e15a      	b.n	8003172 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 814c 	beq.w	800316c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d00b      	beq.n	8002ef4 <HAL_GPIO_Init+0x48>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d007      	beq.n	8002ef4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee8:	2b11      	cmp	r3, #17
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b12      	cmp	r3, #18
 8002ef2:	d130      	bne.n	8002f56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2203      	movs	r2, #3
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	f003 0201 	and.w	r2, r3, #1
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0xea>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b12      	cmp	r3, #18
 8002f94:	d123      	bne.n	8002fde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	08da      	lsrs	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3208      	adds	r2, #8
 8002f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	220f      	movs	r2, #15
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	08da      	lsrs	r2, r3, #3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3208      	adds	r2, #8
 8002fd8:	6939      	ldr	r1, [r7, #16]
 8002fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	2203      	movs	r2, #3
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0203 	and.w	r2, r3, #3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80a6 	beq.w	800316c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003020:	4b5b      	ldr	r3, [pc, #364]	; (8003190 <HAL_GPIO_Init+0x2e4>)
 8003022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003024:	4a5a      	ldr	r2, [pc, #360]	; (8003190 <HAL_GPIO_Init+0x2e4>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6613      	str	r3, [r2, #96]	; 0x60
 800302c:	4b58      	ldr	r3, [pc, #352]	; (8003190 <HAL_GPIO_Init+0x2e4>)
 800302e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003038:	4a56      	ldr	r2, [pc, #344]	; (8003194 <HAL_GPIO_Init+0x2e8>)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	3302      	adds	r3, #2
 8003040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	220f      	movs	r2, #15
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003062:	d01f      	beq.n	80030a4 <HAL_GPIO_Init+0x1f8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a4c      	ldr	r2, [pc, #304]	; (8003198 <HAL_GPIO_Init+0x2ec>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d019      	beq.n	80030a0 <HAL_GPIO_Init+0x1f4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a4b      	ldr	r2, [pc, #300]	; (800319c <HAL_GPIO_Init+0x2f0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <HAL_GPIO_Init+0x1f0>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a4a      	ldr	r2, [pc, #296]	; (80031a0 <HAL_GPIO_Init+0x2f4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00d      	beq.n	8003098 <HAL_GPIO_Init+0x1ec>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a49      	ldr	r2, [pc, #292]	; (80031a4 <HAL_GPIO_Init+0x2f8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d007      	beq.n	8003094 <HAL_GPIO_Init+0x1e8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a48      	ldr	r2, [pc, #288]	; (80031a8 <HAL_GPIO_Init+0x2fc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_GPIO_Init+0x1e4>
 800308c:	2305      	movs	r3, #5
 800308e:	e00a      	b.n	80030a6 <HAL_GPIO_Init+0x1fa>
 8003090:	2306      	movs	r3, #6
 8003092:	e008      	b.n	80030a6 <HAL_GPIO_Init+0x1fa>
 8003094:	2304      	movs	r3, #4
 8003096:	e006      	b.n	80030a6 <HAL_GPIO_Init+0x1fa>
 8003098:	2303      	movs	r3, #3
 800309a:	e004      	b.n	80030a6 <HAL_GPIO_Init+0x1fa>
 800309c:	2302      	movs	r3, #2
 800309e:	e002      	b.n	80030a6 <HAL_GPIO_Init+0x1fa>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_GPIO_Init+0x1fa>
 80030a4:	2300      	movs	r3, #0
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	f002 0203 	and.w	r2, r2, #3
 80030ac:	0092      	lsls	r2, r2, #2
 80030ae:	4093      	lsls	r3, r2
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b6:	4937      	ldr	r1, [pc, #220]	; (8003194 <HAL_GPIO_Init+0x2e8>)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	3302      	adds	r3, #2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_GPIO_Init+0x300>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030e8:	4a30      	ldr	r2, [pc, #192]	; (80031ac <HAL_GPIO_Init+0x300>)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030ee:	4b2f      	ldr	r3, [pc, #188]	; (80031ac <HAL_GPIO_Init+0x300>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003112:	4a26      	ldr	r2, [pc, #152]	; (80031ac <HAL_GPIO_Init+0x300>)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_GPIO_Init+0x300>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_GPIO_Init+0x300>)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <HAL_GPIO_Init+0x300>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	43db      	mvns	r3, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003166:	4a11      	ldr	r2, [pc, #68]	; (80031ac <HAL_GPIO_Init+0x300>)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3301      	adds	r3, #1
 8003170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	f47f ae9d 	bne.w	8002ebc <HAL_GPIO_Init+0x10>
  }
}
 8003182:	bf00      	nop
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40021000 	.word	0x40021000
 8003194:	40010000 	.word	0x40010000
 8003198:	48000400 	.word	0x48000400
 800319c:	48000800 	.word	0x48000800
 80031a0:	48000c00 	.word	0x48000c00
 80031a4:	48001000 	.word	0x48001000
 80031a8:	48001400 	.word	0x48001400
 80031ac:	40010400 	.word	0x40010400

080031b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	887b      	ldrh	r3, [r7, #2]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e001      	b.n	80031d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f0:	787b      	ldrb	r3, [r7, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	041a      	lsls	r2, r3, #16
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43d9      	mvns	r1, r3
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	400b      	ands	r3, r1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800325a:	4a05      	ldr	r2, [pc, #20]	; (8003270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe fb22 	bl	80018ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40010400 	.word	0x40010400

08003274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e081      	b.n	800338a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fede 	bl	800105c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	e006      	b.n	80032fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d104      	bne.n	800330e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800330c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800331c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003320:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003330:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	ea42 0103 	orr.w	r1, r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69d9      	ldr	r1, [r3, #28]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	817b      	strh	r3, [r7, #10]
 80033a6:	460b      	mov	r3, r1
 80033a8:	813b      	strh	r3, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	f040 80f9 	bne.w	80035ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x34>
 80033c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0ed      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_I2C_Mem_Write+0x4e>
 80033de:	2302      	movs	r3, #2
 80033e0:	e0e6      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ea:	f7ff fb61 	bl	8002ab0 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2319      	movs	r3, #25
 80033f6:	2201      	movs	r2, #1
 80033f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fbcb 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0d1      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2221      	movs	r2, #33	; 0x21
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2240      	movs	r2, #64	; 0x40
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a3a      	ldr	r2, [r7, #32]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003434:	88f8      	ldrh	r0, [r7, #6]
 8003436:	893a      	ldrh	r2, [r7, #8]
 8003438:	8979      	ldrh	r1, [r7, #10]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	4603      	mov	r3, r0
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fadb 	bl	8003a00 <I2C_RequestMemoryWrite>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0a9      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	2bff      	cmp	r3, #255	; 0xff
 8003464:	d90e      	bls.n	8003484 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	22ff      	movs	r2, #255	; 0xff
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	b2da      	uxtb	r2, r3
 8003472:	8979      	ldrh	r1, [r7, #10]
 8003474:	2300      	movs	r3, #0
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fcad 	bl	8003ddc <I2C_TransferConfig>
 8003482:	e00f      	b.n	80034a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	b2da      	uxtb	r2, r3
 8003494:	8979      	ldrh	r1, [r7, #10]
 8003496:	2300      	movs	r3, #0
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fc9c 	bl	8003ddc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fbb5 	bl	8003c18 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e07b      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d034      	beq.n	800355c <HAL_I2C_Mem_Write+0x1c8>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d130      	bne.n	800355c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	2200      	movs	r2, #0
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fb47 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e04d      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2bff      	cmp	r3, #255	; 0xff
 800351c:	d90e      	bls.n	800353c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	22ff      	movs	r2, #255	; 0xff
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	b2da      	uxtb	r2, r3
 800352a:	8979      	ldrh	r1, [r7, #10]
 800352c:	2300      	movs	r3, #0
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fc51 	bl	8003ddc <I2C_TransferConfig>
 800353a:	e00f      	b.n	800355c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	b2da      	uxtb	r2, r3
 800354c:	8979      	ldrh	r1, [r7, #10]
 800354e:	2300      	movs	r3, #0
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fc40 	bl	8003ddc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d19e      	bne.n	80034a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fb94 	bl	8003c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e01a      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2220      	movs	r2, #32
 8003580:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6859      	ldr	r1, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_I2C_Mem_Write+0x224>)
 800358e:	400b      	ands	r3, r1
 8003590:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
  }
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	fe00e800 	.word	0xfe00e800

080035bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	817b      	strh	r3, [r7, #10]
 80035ce:	460b      	mov	r3, r1
 80035d0:	813b      	strh	r3, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	f040 80fd 	bne.w	80037de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_I2C_Mem_Read+0x34>
 80035ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0f1      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_I2C_Mem_Read+0x4e>
 8003606:	2302      	movs	r3, #2
 8003608:	e0ea      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003612:	f7ff fa4d 	bl	8002ab0 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2319      	movs	r3, #25
 800361e:	2201      	movs	r2, #1
 8003620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fab7 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0d5      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2222      	movs	r2, #34	; 0x22
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800365c:	88f8      	ldrh	r0, [r7, #6]
 800365e:	893a      	ldrh	r2, [r7, #8]
 8003660:	8979      	ldrh	r1, [r7, #10]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4603      	mov	r3, r0
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fa1b 	bl	8003aa8 <I2C_RequestMemoryRead>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0ad      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2bff      	cmp	r3, #255	; 0xff
 800368c:	d90e      	bls.n	80036ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	22ff      	movs	r2, #255	; 0xff
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	b2da      	uxtb	r2, r3
 800369a:	8979      	ldrh	r1, [r7, #10]
 800369c:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_I2C_Mem_Read+0x22c>)
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fb99 	bl	8003ddc <I2C_TransferConfig>
 80036aa:	e00f      	b.n	80036cc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	8979      	ldrh	r1, [r7, #10]
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_I2C_Mem_Read+0x22c>)
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fb88 	bl	8003ddc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	2200      	movs	r2, #0
 80036d4:	2104      	movs	r1, #4
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fa5e 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07c      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d034      	beq.n	800378c <HAL_I2C_Mem_Read+0x1d0>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	d130      	bne.n	800378c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fa2f 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e04d      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2bff      	cmp	r3, #255	; 0xff
 800374c:	d90e      	bls.n	800376c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	22ff      	movs	r2, #255	; 0xff
 8003752:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	b2da      	uxtb	r2, r3
 800375a:	8979      	ldrh	r1, [r7, #10]
 800375c:	2300      	movs	r3, #0
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fb39 	bl	8003ddc <I2C_TransferConfig>
 800376a:	e00f      	b.n	800378c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377a:	b2da      	uxtb	r2, r3
 800377c:	8979      	ldrh	r1, [r7, #10]
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fb28 	bl	8003ddc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d19a      	bne.n	80036cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa7c 	bl	8003c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e01a      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2220      	movs	r2, #32
 80037b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_I2C_Mem_Read+0x230>)
 80037be:	400b      	ands	r3, r1
 80037c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	80002400 	.word	0x80002400
 80037ec:	fe00e800 	.word	0xfe00e800

080037f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	460b      	mov	r3, r1
 80037fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b20      	cmp	r3, #32
 800380e:	f040 80f1 	bne.w	80039f4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003820:	d101      	bne.n	8003826 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
 8003824:	e0e7      	b.n	80039f6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_I2C_IsDeviceReady+0x44>
 8003830:	2302      	movs	r3, #2
 8003832:	e0e0      	b.n	80039f6 <HAL_I2C_IsDeviceReady+0x206>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_I2C_IsDeviceReady+0x72>
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800385c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003860:	e004      	b.n	800386c <HAL_I2C_IsDeviceReady+0x7c>
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003868:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003872:	f7ff f91d 	bl	8002ab0 <HAL_GetTick>
 8003876:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b20      	cmp	r3, #32
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80038a4:	e034      	b.n	8003910 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d01a      	beq.n	80038e4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038ae:	f7ff f8ff 	bl	8002ab0 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <HAL_I2C_IsDeviceReady+0xd4>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10f      	bne.n	80038e4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	f043 0220 	orr.w	r2, r3, #32
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e088      	b.n	80039f6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b10      	cmp	r3, #16
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003910:	7ffb      	ldrb	r3, [r7, #31]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <HAL_I2C_IsDeviceReady+0x12c>
 8003916:	7fbb      	ldrb	r3, [r7, #30]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0c4      	beq.n	80038a6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b10      	cmp	r3, #16
 8003928:	d01a      	beq.n	8003960 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2200      	movs	r2, #0
 8003932:	2120      	movs	r1, #32
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f92f 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e058      	b.n	80039f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2220      	movs	r2, #32
 800394a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e04a      	b.n	80039f6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2200      	movs	r2, #0
 8003968:	2120      	movs	r1, #32
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f914 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e03d      	b.n	80039f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2210      	movs	r2, #16
 8003980:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2220      	movs	r2, #32
 8003988:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d118      	bne.n	80039c4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039a0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	2120      	movs	r1, #32
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f8f3 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e01c      	b.n	80039f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2220      	movs	r2, #32
 80039c2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	3301      	adds	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	f63f af3b 	bhi.w	800384a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	817b      	strh	r3, [r7, #10]
 8003a12:	460b      	mov	r3, r1
 8003a14:	813b      	strh	r3, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	8979      	ldrh	r1, [r7, #10]
 8003a20:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <I2C_RequestMemoryWrite+0xa4>)
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f9d7 	bl	8003ddc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f8f0 	bl	8003c18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e02c      	b.n	8003a9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d105      	bne.n	8003a54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a48:	893b      	ldrh	r3, [r7, #8]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	629a      	str	r2, [r3, #40]	; 0x28
 8003a52:	e015      	b.n	8003a80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a54:	893b      	ldrh	r3, [r7, #8]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	69b9      	ldr	r1, [r7, #24]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8d6 	bl	8003c18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e012      	b.n	8003a9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a76:	893b      	ldrh	r3, [r7, #8]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2200      	movs	r2, #0
 8003a88:	2180      	movs	r1, #128	; 0x80
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f884 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	80002000 	.word	0x80002000

08003aa8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	817b      	strh	r3, [r7, #10]
 8003aba:	460b      	mov	r3, r1
 8003abc:	813b      	strh	r3, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	8979      	ldrh	r1, [r7, #10]
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <I2C_RequestMemoryRead+0xa4>)
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2300      	movs	r3, #0
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f984 	bl	8003ddc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f89d 	bl	8003c18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e02c      	b.n	8003b42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aee:	893b      	ldrh	r3, [r7, #8]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
 8003af8:	e015      	b.n	8003b26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003afa:	893b      	ldrh	r3, [r7, #8]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f883 	bl	8003c18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e012      	b.n	8003b42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b1c:	893b      	ldrh	r3, [r7, #8]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f831 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	80002000 	.word	0x80002000

08003b50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d103      	bne.n	8003b6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d007      	beq.n	8003b8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	619a      	str	r2, [r3, #24]
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba8:	e022      	b.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d01e      	beq.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb2:	f7fe ff7d 	bl	8002ab0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d302      	bcc.n	8003bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d113      	bne.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e00f      	b.n	8003c10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d0cd      	beq.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c24:	e02c      	b.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f870 	bl	8003d10 <I2C_IsAcknowledgeFailed>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e02a      	b.n	8003c90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d01e      	beq.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fe ff35 	bl	8002ab0 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d113      	bne.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e007      	b.n	8003c90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d1cb      	bne.n	8003c26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca4:	e028      	b.n	8003cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f830 	bl	8003d10 <I2C_IsAcknowledgeFailed>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e026      	b.n	8003d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cba:	f7fe fef9 	bl	8002ab0 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d113      	bne.n	8003cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e007      	b.n	8003d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d1cf      	bne.n	8003ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d151      	bne.n	8003dce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d2a:	e022      	b.n	8003d72 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d01e      	beq.n	8003d72 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d34:	f7fe febc 	bl	8002ab0 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <I2C_IsAcknowledgeFailed+0x3a>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d113      	bne.n	8003d72 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e02e      	b.n	8003dd0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d1d5      	bne.n	8003d2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2210      	movs	r2, #16
 8003d86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7ff fedd 	bl	8003b50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003da2:	400b      	ands	r3, r1
 8003da4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f043 0204 	orr.w	r2, r3, #4
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	fe00e800 	.word	0xfe00e800

08003ddc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	817b      	strh	r3, [r7, #10]
 8003dea:	4613      	mov	r3, r2
 8003dec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	0d5b      	lsrs	r3, r3, #21
 8003df8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <I2C_TransferConfig+0x58>)
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	43db      	mvns	r3, r3
 8003e02:	ea02 0103 	and.w	r1, r2, r3
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e0c:	7a7b      	ldrb	r3, [r7, #9]
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	03ff63ff 	.word	0x03ff63ff

08003e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d138      	bne.n	8003ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e032      	b.n	8003ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	; 0x24
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d139      	bne.n	8003f58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e033      	b.n	8003f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2224      	movs	r2, #36	; 0x24
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d141      	bne.n	8003ffa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f76:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	d131      	bne.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f84:	4b47      	ldr	r3, [pc, #284]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8a:	4a46      	ldr	r2, [pc, #280]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f9c:	4a41      	ldr	r2, [pc, #260]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fa4:	4b40      	ldr	r3, [pc, #256]	; (80040a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2232      	movs	r2, #50	; 0x32
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	4a3f      	ldr	r2, [pc, #252]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	0c9b      	lsrs	r3, r3, #18
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fba:	e002      	b.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fc2:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d102      	bne.n	8003fd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f2      	bne.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fd6:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	d158      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e057      	b.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe8:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fee:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ff8:	e04d      	b.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d141      	bne.n	8004086 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004002:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400e:	d131      	bne.n	8004074 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004010:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004016:	4a23      	ldr	r2, [pc, #140]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004028:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800402e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2232      	movs	r2, #50	; 0x32
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	0c9b      	lsrs	r3, r3, #18
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004046:	e002      	b.n	800404e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b01      	subs	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405a:	d102      	bne.n	8004062 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f2      	bne.n	8004048 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406e:	d112      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e011      	b.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004084:	e007      	b.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004094:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40007000 	.word	0x40007000
 80040a8:	20000000 	.word	0x20000000
 80040ac:	431bde83 	.word	0x431bde83

080040b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040be:	6093      	str	r3, [r2, #8]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40007000 	.word	0x40007000

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e308      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d075      	beq.n	80041da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ee:	4ba3      	ldr	r3, [pc, #652]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f8:	4ba0      	ldr	r3, [pc, #640]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d102      	bne.n	800410e <HAL_RCC_OscConfig+0x3e>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b03      	cmp	r3, #3
 800410c:	d002      	beq.n	8004114 <HAL_RCC_OscConfig+0x44>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	4b99      	ldr	r3, [pc, #612]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05b      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d157      	bne.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e2e3      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d106      	bne.n	8004144 <HAL_RCC_OscConfig+0x74>
 8004136:	4b91      	ldr	r3, [pc, #580]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a90      	ldr	r2, [pc, #576]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x98>
 800414e:	4b8b      	ldr	r3, [pc, #556]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a8a      	ldr	r2, [pc, #552]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a87      	ldr	r2, [pc, #540]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004168:	4b84      	ldr	r3, [pc, #528]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a83      	ldr	r2, [pc, #524]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b81      	ldr	r3, [pc, #516]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a80      	ldr	r2, [pc, #512]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe fc92 	bl	8002ab0 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7fe fc8e 	bl	8002ab0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e2a8      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a2:	4b76      	ldr	r3, [pc, #472]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xc0>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fe fc7e 	bl	8002ab0 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fe fc7a 	bl	8002ab0 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e294      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ca:	4b6c      	ldr	r3, [pc, #432]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0xe8>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d075      	beq.n	80042d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f0:	4b62      	ldr	r3, [pc, #392]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	d102      	bne.n	8004206 <HAL_RCC_OscConfig+0x136>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d002      	beq.n	800420c <HAL_RCC_OscConfig+0x13c>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b04      	cmp	r3, #4
 800420a:	d11f      	bne.n	800424c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800420c:	4b5b      	ldr	r3, [pc, #364]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_OscConfig+0x154>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e267      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b55      	ldr	r3, [pc, #340]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	4952      	ldr	r1, [pc, #328]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004238:	4b51      	ldr	r3, [pc, #324]	; (8004380 <HAL_RCC_OscConfig+0x2b0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fbeb 	bl	8002a18 <HAL_InitTick>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d043      	beq.n	80042d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e253      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d023      	beq.n	800429c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004254:	4b49      	ldr	r3, [pc, #292]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a48      	ldr	r2, [pc, #288]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800425a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fe fc26 	bl	8002ab0 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004268:	f7fe fc22 	bl	8002ab0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e23c      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800427a:	4b40      	ldr	r3, [pc, #256]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	4939      	ldr	r1, [pc, #228]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004296:	4313      	orrs	r3, r2
 8004298:	604b      	str	r3, [r1, #4]
 800429a:	e01a      	b.n	80042d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429c:	4b37      	ldr	r3, [pc, #220]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a36      	ldr	r2, [pc, #216]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fe fc02 	bl	8002ab0 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b0:	f7fe fbfe 	bl	8002ab0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e218      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042c2:	4b2e      	ldr	r3, [pc, #184]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x1e0>
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d03c      	beq.n	8004358 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01c      	beq.n	8004320 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e6:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ec:	4a23      	ldr	r2, [pc, #140]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f6:	f7fe fbdb 	bl	8002ab0 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fe:	f7fe fbd7 	bl	8002ab0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e1f1      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ef      	beq.n	80042fe <HAL_RCC_OscConfig+0x22e>
 800431e:	e01b      	b.n	8004358 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004320:	4b16      	ldr	r3, [pc, #88]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004326:	4a15      	ldr	r2, [pc, #84]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fe fbbe 	bl	8002ab0 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004338:	f7fe fbba 	bl	8002ab0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1d4      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800434a:	4b0c      	ldr	r3, [pc, #48]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ef      	bne.n	8004338 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80ab 	beq.w	80044bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800436a:	4b04      	ldr	r3, [pc, #16]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_RCC_OscConfig+0x2b4>
 8004376:	2301      	movs	r3, #1
 8004378:	e005      	b.n	8004386 <HAL_RCC_OscConfig+0x2b6>
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000
 8004380:	20000004 	.word	0x20000004
 8004384:	2300      	movs	r3, #0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438a:	4baf      	ldr	r3, [pc, #700]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	4aae      	ldr	r2, [pc, #696]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004394:	6593      	str	r3, [r2, #88]	; 0x58
 8004396:	4bac      	ldr	r3, [pc, #688]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043a2:	2301      	movs	r3, #1
 80043a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a6:	4ba9      	ldr	r3, [pc, #676]	; (800464c <HAL_RCC_OscConfig+0x57c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d118      	bne.n	80043e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b2:	4ba6      	ldr	r3, [pc, #664]	; (800464c <HAL_RCC_OscConfig+0x57c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4aa5      	ldr	r2, [pc, #660]	; (800464c <HAL_RCC_OscConfig+0x57c>)
 80043b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043be:	f7fe fb77 	bl	8002ab0 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c6:	f7fe fb73 	bl	8002ab0 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e18d      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d8:	4b9c      	ldr	r3, [pc, #624]	; (800464c <HAL_RCC_OscConfig+0x57c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d108      	bne.n	80043fe <HAL_RCC_OscConfig+0x32e>
 80043ec:	4b96      	ldr	r3, [pc, #600]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	4a95      	ldr	r2, [pc, #596]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043fc:	e024      	b.n	8004448 <HAL_RCC_OscConfig+0x378>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b05      	cmp	r3, #5
 8004404:	d110      	bne.n	8004428 <HAL_RCC_OscConfig+0x358>
 8004406:	4b90      	ldr	r3, [pc, #576]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	4a8e      	ldr	r2, [pc, #568]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800440e:	f043 0304 	orr.w	r3, r3, #4
 8004412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004416:	4b8c      	ldr	r3, [pc, #560]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	4a8a      	ldr	r2, [pc, #552]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004426:	e00f      	b.n	8004448 <HAL_RCC_OscConfig+0x378>
 8004428:	4b87      	ldr	r3, [pc, #540]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	4a86      	ldr	r2, [pc, #536]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004438:	4b83      	ldr	r3, [pc, #524]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	4a82      	ldr	r2, [pc, #520]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004440:	f023 0304 	bic.w	r3, r3, #4
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d016      	beq.n	800447e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fe fb2e 	bl	8002ab0 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004456:	e00a      	b.n	800446e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fe fb2a 	bl	8002ab0 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e142      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446e:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ed      	beq.n	8004458 <HAL_RCC_OscConfig+0x388>
 800447c:	e015      	b.n	80044aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fe fb17 	bl	8002ab0 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004484:	e00a      	b.n	800449c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7fe fb13 	bl	8002ab0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e12b      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800449c:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1ed      	bne.n	8004486 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b0:	4b65      	ldr	r3, [pc, #404]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4a64      	ldr	r2, [pc, #400]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d03c      	beq.n	8004542 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01c      	beq.n	800450a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044d0:	4b5d      	ldr	r3, [pc, #372]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80044d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d6:	4a5c      	ldr	r2, [pc, #368]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e0:	f7fe fae6 	bl	8002ab0 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044e8:	f7fe fae2 	bl	8002ab0 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e0fc      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044fa:	4b53      	ldr	r3, [pc, #332]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80044fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ef      	beq.n	80044e8 <HAL_RCC_OscConfig+0x418>
 8004508:	e01b      	b.n	8004542 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800450a:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800450c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004510:	4a4d      	ldr	r2, [pc, #308]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fe fac9 	bl	8002ab0 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004522:	f7fe fac5 	bl	8002ab0 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0df      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004534:	4b44      	ldr	r3, [pc, #272]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ef      	bne.n	8004522 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80d3 	beq.w	80046f2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800454c:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b0c      	cmp	r3, #12
 8004556:	f000 808d 	beq.w	8004674 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d15a      	bne.n	8004618 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004562:	4b39      	ldr	r3, [pc, #228]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a38      	ldr	r2, [pc, #224]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456e:	f7fe fa9f 	bl	8002ab0 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004576:	f7fe fa9b 	bl	8002ab0 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e0b5      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f0      	bne.n	8004576 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004594:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <HAL_RCC_OscConfig+0x580>)
 800459a:	4013      	ands	r3, r2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6a11      	ldr	r1, [r2, #32]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045a4:	3a01      	subs	r2, #1
 80045a6:	0112      	lsls	r2, r2, #4
 80045a8:	4311      	orrs	r1, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045ae:	0212      	lsls	r2, r2, #8
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0552      	lsls	r2, r2, #21
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045c2:	0852      	lsrs	r2, r2, #1
 80045c4:	3a01      	subs	r2, #1
 80045c6:	0652      	lsls	r2, r2, #25
 80045c8:	4311      	orrs	r1, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045ce:	06d2      	lsls	r2, r2, #27
 80045d0:	430a      	orrs	r2, r1
 80045d2:	491d      	ldr	r1, [pc, #116]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1a      	ldr	r2, [pc, #104]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045e4:	4b18      	ldr	r3, [pc, #96]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a17      	ldr	r2, [pc, #92]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 80045ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe fa5e 	bl	8002ab0 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fe fa5a 	bl	8002ab0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e074      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x528>
 8004616:	e06c      	b.n	80046f2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800461e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004622:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004624:	4b08      	ldr	r3, [pc, #32]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a07      	ldr	r2, [pc, #28]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a04      	ldr	r2, [pc, #16]	; (8004648 <HAL_RCC_OscConfig+0x578>)
 8004636:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800463a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fe fa36 	bl	8002ab0 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004646:	e00e      	b.n	8004666 <HAL_RCC_OscConfig+0x596>
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
 8004650:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fe fa2c 	bl	8002ab0 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e046      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004666:	4b25      	ldr	r3, [pc, #148]	; (80046fc <HAL_RCC_OscConfig+0x62c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x584>
 8004672:	e03e      	b.n	80046f2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e039      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004680:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <HAL_RCC_OscConfig+0x62c>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f003 0203 	and.w	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	429a      	cmp	r2, r3
 8004692:	d12c      	bne.n	80046ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	3b01      	subs	r3, #1
 80046a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d123      	bne.n	80046ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d11b      	bne.n	80046ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d113      	bne.n	80046ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	3b01      	subs	r3, #1
 80046d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	3b01      	subs	r3, #1
 80046e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d001      	beq.n	80046f2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40021000 	.word	0x40021000

08004700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e11e      	b.n	8004956 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004718:	4b91      	ldr	r3, [pc, #580]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d910      	bls.n	8004748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b8e      	ldr	r3, [pc, #568]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 020f 	bic.w	r2, r3, #15
 800472e:	498c      	ldr	r1, [pc, #560]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004736:	4b8a      	ldr	r3, [pc, #552]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e106      	b.n	8004956 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d073      	beq.n	800483c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d129      	bne.n	80047b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475c:	4b81      	ldr	r3, [pc, #516]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0f4      	b.n	8004956 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800476c:	f000 f99e 	bl	8004aac <RCC_GetSysClockFreqFromPLLSource>
 8004770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4a7c      	ldr	r2, [pc, #496]	; (8004968 <HAL_RCC_ClockConfig+0x268>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d93f      	bls.n	80047fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800477a:	4b7a      	ldr	r3, [pc, #488]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800478e:	2b00      	cmp	r3, #0
 8004790:	d033      	beq.n	80047fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004796:	2b00      	cmp	r3, #0
 8004798:	d12f      	bne.n	80047fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800479a:	4b72      	ldr	r3, [pc, #456]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047a2:	4a70      	ldr	r2, [pc, #448]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e024      	b.n	80047fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0c6      	b.n	8004956 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047c8:	4b66      	ldr	r3, [pc, #408]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0be      	b.n	8004956 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047d8:	f000 f8ce 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4a61      	ldr	r2, [pc, #388]	; (8004968 <HAL_RCC_ClockConfig+0x268>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d909      	bls.n	80047fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047e6:	4b5f      	ldr	r3, [pc, #380]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ee:	4a5d      	ldr	r2, [pc, #372]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 80047f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047fa:	4b5a      	ldr	r3, [pc, #360]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f023 0203 	bic.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4957      	ldr	r1, [pc, #348]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 8004808:	4313      	orrs	r3, r2
 800480a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480c:	f7fe f950 	bl	8002ab0 <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	e00a      	b.n	800482a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004814:	f7fe f94c 	bl	8002ab0 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e095      	b.n	8004956 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	4b4e      	ldr	r3, [pc, #312]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 020c 	and.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	429a      	cmp	r2, r3
 800483a:	d1eb      	bne.n	8004814 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d023      	beq.n	8004890 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004854:	4b43      	ldr	r3, [pc, #268]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a42      	ldr	r2, [pc, #264]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 800485a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800485e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800486c:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004874:	4a3b      	ldr	r2, [pc, #236]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 8004876:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800487a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b39      	ldr	r3, [pc, #228]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4936      	ldr	r1, [pc, #216]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
 800488e:	e008      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b80      	cmp	r3, #128	; 0x80
 8004894:	d105      	bne.n	80048a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004896:	4b33      	ldr	r3, [pc, #204]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	4a32      	ldr	r2, [pc, #200]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 800489c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a2:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d21d      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f023 020f 	bic.w	r2, r3, #15
 80048b8:	4929      	ldr	r1, [pc, #164]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048c0:	f7fe f8f6 	bl	8002ab0 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	e00a      	b.n	80048de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c8:	f7fe f8f2 	bl	8002ab0 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e03b      	b.n	8004956 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d1ed      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f8:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4917      	ldr	r1, [pc, #92]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490f      	ldr	r1, [pc, #60]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800492a:	f000 f825 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 800492e:	4602      	mov	r2, r0
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_RCC_ClockConfig+0x264>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	490c      	ldr	r1, [pc, #48]	; (800496c <HAL_RCC_ClockConfig+0x26c>)
 800493c:	5ccb      	ldrb	r3, [r1, r3]
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	fa22 f303 	lsr.w	r3, r2, r3
 8004946:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <HAL_RCC_ClockConfig+0x270>)
 8004948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_RCC_ClockConfig+0x274>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe f862 	bl	8002a18 <HAL_InitTick>
 8004954:	4603      	mov	r3, r0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40022000 	.word	0x40022000
 8004964:	40021000 	.word	0x40021000
 8004968:	04c4b400 	.word	0x04c4b400
 800496c:	080081b4 	.word	0x080081b4
 8004970:	20000000 	.word	0x20000000
 8004974:	20000004 	.word	0x20000004

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800497e:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b04      	cmp	r3, #4
 8004988:	d102      	bne.n	8004990 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800498a:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	e047      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004990:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d102      	bne.n	80049a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800499c:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xc0>)
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	e03e      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049a2:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d136      	bne.n	8004a1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049b8:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	3301      	adds	r3, #1
 80049c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049cc:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d6:	68d2      	ldr	r2, [r2, #12]
 80049d8:	0a12      	lsrs	r2, r2, #8
 80049da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	617b      	str	r3, [r7, #20]
      break;
 80049e4:	e00c      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049e6:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ee:	4a10      	ldr	r2, [pc, #64]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f0:	68d2      	ldr	r2, [r2, #12]
 80049f2:	0a12      	lsrs	r2, r2, #8
 80049f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	617b      	str	r3, [r7, #20]
      break;
 80049fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	0e5b      	lsrs	r3, r3, #25
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	e001      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a20:	693b      	ldr	r3, [r7, #16]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000
 8004a34:	00f42400 	.word	0x00f42400
 8004a38:	007a1200 	.word	0x007a1200

08004a3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000000 	.word	0x20000000

08004a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a58:	f7ff fff0 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4904      	ldr	r1, [pc, #16]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	080081c4 	.word	0x080081c4

08004a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a84:	f7ff ffda 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	0adb      	lsrs	r3, r3, #11
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	080081c4 	.word	0x080081c4

08004aac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d10c      	bne.n	8004aea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ad0:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ada:	68d2      	ldr	r2, [r2, #12]
 8004adc:	0a12      	lsrs	r2, r2, #8
 8004ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	617b      	str	r3, [r7, #20]
    break;
 8004ae8:	e00c      	b.n	8004b04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aea:	4a12      	ldr	r2, [pc, #72]	; (8004b34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	4a0e      	ldr	r2, [pc, #56]	; (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af4:	68d2      	ldr	r2, [r2, #12]
 8004af6:	0a12      	lsrs	r2, r2, #8
 8004af8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]
    break;
 8004b02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	0e5b      	lsrs	r3, r3, #25
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	3301      	adds	r3, #1
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b1e:	687b      	ldr	r3, [r7, #4]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	007a1200 	.word	0x007a1200
 8004b34:	00f42400 	.word	0x00f42400

08004b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b40:	2300      	movs	r3, #0
 8004b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b44:	2300      	movs	r3, #0
 8004b46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8098 	beq.w	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5a:	4b43      	ldr	r3, [pc, #268]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	4b40      	ldr	r3, [pc, #256]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	4a3f      	ldr	r2, [pc, #252]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6593      	str	r3, [r2, #88]	; 0x58
 8004b72:	4b3d      	ldr	r3, [pc, #244]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b82:	4b3a      	ldr	r3, [pc, #232]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a39      	ldr	r2, [pc, #228]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b8e:	f7fd ff8f 	bl	8002ab0 <HAL_GetTick>
 8004b92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b94:	e009      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b96:	f7fd ff8b 	bl	8002ab0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d902      	bls.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ba8:	e005      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004baa:	4b30      	ldr	r3, [pc, #192]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ef      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004bb6:	7cfb      	ldrb	r3, [r7, #19]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d159      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bbc:	4b2a      	ldr	r3, [pc, #168]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01e      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d019      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bd8:	4b23      	ldr	r3, [pc, #140]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004be4:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a1f      	ldr	r2, [pc, #124]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf4:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c04:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7fd ff4b 	bl	8002ab0 <HAL_GetTick>
 8004c1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1c:	e00b      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1e:	f7fd ff47 	bl	8002ab0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d902      	bls.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	74fb      	strb	r3, [r7, #19]
            break;
 8004c34:	e006      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ec      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c44:	7cfb      	ldrb	r3, [r7, #19]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	4903      	ldr	r1, [pc, #12]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c60:	e008      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	74bb      	strb	r3, [r7, #18]
 8004c66:	e005      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c74:	7c7b      	ldrb	r3, [r7, #17]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c7a:	4ba6      	ldr	r3, [pc, #664]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7e:	4aa5      	ldr	r2, [pc, #660]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c92:	4ba0      	ldr	r3, [pc, #640]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f023 0203 	bic.w	r2, r3, #3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	499c      	ldr	r1, [pc, #624]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cb4:	4b97      	ldr	r3, [pc, #604]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f023 020c 	bic.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	4994      	ldr	r1, [pc, #592]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cd6:	4b8f      	ldr	r3, [pc, #572]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	498b      	ldr	r1, [pc, #556]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cf8:	4b86      	ldr	r3, [pc, #536]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	4983      	ldr	r1, [pc, #524]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d1a:	4b7e      	ldr	r3, [pc, #504]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	497a      	ldr	r1, [pc, #488]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d3c:	4b75      	ldr	r3, [pc, #468]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	4972      	ldr	r1, [pc, #456]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d5e:	4b6d      	ldr	r3, [pc, #436]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4969      	ldr	r1, [pc, #420]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d80:	4b64      	ldr	r3, [pc, #400]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	4961      	ldr	r1, [pc, #388]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004da2:	4b5c      	ldr	r3, [pc, #368]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	4958      	ldr	r1, [pc, #352]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d015      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dc4:	4b53      	ldr	r3, [pc, #332]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	4950      	ldr	r1, [pc, #320]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de2:	d105      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de4:	4b4b      	ldr	r3, [pc, #300]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a4a      	ldr	r2, [pc, #296]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d015      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dfc:	4b45      	ldr	r3, [pc, #276]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	4942      	ldr	r1, [pc, #264]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1a:	d105      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1c:	4b3d      	ldr	r3, [pc, #244]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a3c      	ldr	r2, [pc, #240]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e34:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	4934      	ldr	r1, [pc, #208]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e52:	d105      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a2e      	ldr	r2, [pc, #184]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d015      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e6c:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	4926      	ldr	r1, [pc, #152]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8a:	d105      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a20      	ldr	r2, [pc, #128]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d015      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	4918      	ldr	r1, [pc, #96]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ece:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d015      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	490a      	ldr	r1, [pc, #40]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004efa:	d105      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f08:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000

08004f18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e049      	b.n	8004fbe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fd fc0e 	bl	8002760 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 fbe8 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d104      	bne.n	8004fe2 <HAL_TIM_IC_Start_IT+0x1a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	e023      	b.n	800502a <HAL_TIM_IC_Start_IT+0x62>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d104      	bne.n	8004ff2 <HAL_TIM_IC_Start_IT+0x2a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	e01b      	b.n	800502a <HAL_TIM_IC_Start_IT+0x62>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_IC_Start_IT+0x3a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	e013      	b.n	800502a <HAL_TIM_IC_Start_IT+0x62>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d104      	bne.n	8005012 <HAL_TIM_IC_Start_IT+0x4a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500e:	b2db      	uxtb	r3, r3
 8005010:	e00b      	b.n	800502a <HAL_TIM_IC_Start_IT+0x62>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b10      	cmp	r3, #16
 8005016:	d104      	bne.n	8005022 <HAL_TIM_IC_Start_IT+0x5a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e003      	b.n	800502a <HAL_TIM_IC_Start_IT+0x62>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005028:	b2db      	uxtb	r3, r3
 800502a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <HAL_TIM_IC_Start_IT+0x74>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e013      	b.n	8005064 <HAL_TIM_IC_Start_IT+0x9c>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b04      	cmp	r3, #4
 8005040:	d104      	bne.n	800504c <HAL_TIM_IC_Start_IT+0x84>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e00b      	b.n	8005064 <HAL_TIM_IC_Start_IT+0x9c>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b08      	cmp	r3, #8
 8005050:	d104      	bne.n	800505c <HAL_TIM_IC_Start_IT+0x94>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005058:	b2db      	uxtb	r3, r3
 800505a:	e003      	b.n	8005064 <HAL_TIM_IC_Start_IT+0x9c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005062:	b2db      	uxtb	r3, r3
 8005064:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d102      	bne.n	8005072 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800506c:	7bbb      	ldrb	r3, [r7, #14]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d001      	beq.n	8005076 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0d3      	b.n	800521e <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <HAL_TIM_IC_Start_IT+0xbe>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005084:	e023      	b.n	80050ce <HAL_TIM_IC_Start_IT+0x106>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d104      	bne.n	8005096 <HAL_TIM_IC_Start_IT+0xce>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005094:	e01b      	b.n	80050ce <HAL_TIM_IC_Start_IT+0x106>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_IC_Start_IT+0xde>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a4:	e013      	b.n	80050ce <HAL_TIM_IC_Start_IT+0x106>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_IC_Start_IT+0xee>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050b4:	e00b      	b.n	80050ce <HAL_TIM_IC_Start_IT+0x106>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_IC_Start_IT+0xfe>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c4:	e003      	b.n	80050ce <HAL_TIM_IC_Start_IT+0x106>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d104      	bne.n	80050de <HAL_TIM_IC_Start_IT+0x116>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050dc:	e013      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x13e>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_IC_Start_IT+0x126>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ec:	e00b      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x13e>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0x136>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050fc:	e003      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x13e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	d841      	bhi.n	8005190 <HAL_TIM_IC_Start_IT+0x1c8>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <HAL_TIM_IC_Start_IT+0x14c>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005149 	.word	0x08005149
 8005118:	08005191 	.word	0x08005191
 800511c:	08005191 	.word	0x08005191
 8005120:	08005191 	.word	0x08005191
 8005124:	0800515b 	.word	0x0800515b
 8005128:	08005191 	.word	0x08005191
 800512c:	08005191 	.word	0x08005191
 8005130:	08005191 	.word	0x08005191
 8005134:	0800516d 	.word	0x0800516d
 8005138:	08005191 	.word	0x08005191
 800513c:	08005191 	.word	0x08005191
 8005140:	08005191 	.word	0x08005191
 8005144:	0800517f 	.word	0x0800517f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0202 	orr.w	r2, r2, #2
 8005156:	60da      	str	r2, [r3, #12]
      break;
 8005158:	e01b      	b.n	8005192 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0204 	orr.w	r2, r2, #4
 8005168:	60da      	str	r2, [r3, #12]
      break;
 800516a:	e012      	b.n	8005192 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0208 	orr.w	r2, r2, #8
 800517a:	60da      	str	r2, [r3, #12]
      break;
 800517c:	e009      	b.n	8005192 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0210 	orr.w	r2, r2, #16
 800518c:	60da      	str	r2, [r3, #12]
      break;
 800518e:	e000      	b.n	8005192 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8005190:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2201      	movs	r2, #1
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fc74 	bl	8005a88 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a20      	ldr	r2, [pc, #128]	; (8005228 <HAL_TIM_IC_Start_IT+0x260>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d018      	beq.n	80051dc <HAL_TIM_IC_Start_IT+0x214>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d013      	beq.n	80051dc <HAL_TIM_IC_Start_IT+0x214>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1c      	ldr	r2, [pc, #112]	; (800522c <HAL_TIM_IC_Start_IT+0x264>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00e      	beq.n	80051dc <HAL_TIM_IC_Start_IT+0x214>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <HAL_TIM_IC_Start_IT+0x268>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_TIM_IC_Start_IT+0x214>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <HAL_TIM_IC_Start_IT+0x26c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_TIM_IC_Start_IT+0x214>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_TIM_IC_Start_IT+0x270>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d115      	bne.n	8005208 <HAL_TIM_IC_Start_IT+0x240>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	4b16      	ldr	r3, [pc, #88]	; (800523c <HAL_TIM_IC_Start_IT+0x274>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b06      	cmp	r3, #6
 80051ec:	d015      	beq.n	800521a <HAL_TIM_IC_Start_IT+0x252>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f4:	d011      	beq.n	800521a <HAL_TIM_IC_Start_IT+0x252>
    {
      __HAL_TIM_ENABLE(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005206:	e008      	b.n	800521a <HAL_TIM_IC_Start_IT+0x252>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e000      	b.n	800521c <HAL_TIM_IC_Start_IT+0x254>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	00010007 	.word	0x00010007

08005240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d122      	bne.n	800529c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b02      	cmp	r3, #2
 8005262:	d11b      	bne.n	800529c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0202 	mvn.w	r2, #2
 800526c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fb ff66 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa30 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fa37 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d122      	bne.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d11b      	bne.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0204 	mvn.w	r2, #4
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fb ff3c 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa06 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fa0d 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b08      	cmp	r3, #8
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0208 	mvn.w	r2, #8
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2204      	movs	r2, #4
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fb ff12 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9dc 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f9e3 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	2b10      	cmp	r3, #16
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b10      	cmp	r3, #16
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0210 	mvn.w	r2, #16
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2208      	movs	r2, #8
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fb fee8 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f9b2 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f9b9 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d10e      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d107      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0201 	mvn.w	r2, #1
 80053bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fc fa6a 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b80      	cmp	r3, #128	; 0x80
 80053d0:	d10e      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053dc:	2b80      	cmp	r3, #128	; 0x80
 80053de:	d107      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fbfe 	bl	8005bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fe:	d10e      	bne.n	800541e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d107      	bne.n	800541e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fbf1 	bl	8005c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d10e      	bne.n	800544a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d107      	bne.n	800544a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f967 	bl	8005718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b20      	cmp	r3, #32
 8005456:	d10e      	bne.n	8005476 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b20      	cmp	r3, #32
 8005464:	d107      	bne.n	8005476 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f06f 0220 	mvn.w	r2, #32
 800546e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fbb1 	bl	8005bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005484:	d10f      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005494:	d107      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800549e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fbb7 	bl	8005c14 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054b4:	d10f      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c4:	d107      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80054ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fba9 	bl	8005c28 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e4:	d10f      	bne.n	8005506 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f4:	d107      	bne.n	8005506 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80054fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fb9b 	bl	8005c3c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005510:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005514:	d10f      	bne.n	8005536 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005520:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005524:	d107      	bne.n	8005536 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800552e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fb8d 	bl	8005c50 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005554:	2302      	movs	r3, #2
 8005556:	e082      	b.n	800565e <HAL_TIM_IC_ConfigChannel+0x120>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11b      	bne.n	800559e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f000 f969 	bl	800584c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 020c 	bic.w	r2, r2, #12
 8005588:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6999      	ldr	r1, [r3, #24]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	619a      	str	r2, [r3, #24]
 800559c:	e05a      	b.n	8005654 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d11c      	bne.n	80055de <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6819      	ldr	r1, [r3, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f000 f9b2 	bl	800591c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6999      	ldr	r1, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	021a      	lsls	r2, r3, #8
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	619a      	str	r2, [r3, #24]
 80055dc:	e03a      	b.n	8005654 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6819      	ldr	r1, [r3, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f000 f9cf 	bl	8005996 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69da      	ldr	r2, [r3, #28]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 020c 	bic.w	r2, r2, #12
 8005606:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69d9      	ldr	r1, [r3, #28]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	61da      	str	r2, [r3, #28]
 800561a:	e01b      	b.n	8005654 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6819      	ldr	r1, [r3, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f000 f9ef 	bl	8005a0e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69da      	ldr	r2, [r3, #28]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800563e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69d9      	ldr	r1, [r3, #28]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	021a      	lsls	r2, r3, #8
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b0c      	cmp	r3, #12
 800567a:	d831      	bhi.n	80056e0 <HAL_TIM_ReadCapturedValue+0x78>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <HAL_TIM_ReadCapturedValue+0x1c>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	080056b9 	.word	0x080056b9
 8005688:	080056e1 	.word	0x080056e1
 800568c:	080056e1 	.word	0x080056e1
 8005690:	080056e1 	.word	0x080056e1
 8005694:	080056c3 	.word	0x080056c3
 8005698:	080056e1 	.word	0x080056e1
 800569c:	080056e1 	.word	0x080056e1
 80056a0:	080056e1 	.word	0x080056e1
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056e1 	.word	0x080056e1
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	080056e1 	.word	0x080056e1
 80056b4:	080056d7 	.word	0x080056d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056be:	60fb      	str	r3, [r7, #12]

      break;
 80056c0:	e00f      	b.n	80056e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	60fb      	str	r3, [r7, #12]

      break;
 80056ca:	e00a      	b.n	80056e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d2:	60fb      	str	r3, [r7, #12]

      break;
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	60fb      	str	r3, [r7, #12]

      break;
 80056de:	e000      	b.n	80056e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80056e0:	bf00      	nop
  }

  return tmpreg;
 80056e2:	68fb      	ldr	r3, [r7, #12]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a3c      	ldr	r2, [pc, #240]	; (8005830 <TIM_Base_SetConfig+0x104>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00f      	beq.n	8005764 <TIM_Base_SetConfig+0x38>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574a:	d00b      	beq.n	8005764 <TIM_Base_SetConfig+0x38>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a39      	ldr	r2, [pc, #228]	; (8005834 <TIM_Base_SetConfig+0x108>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <TIM_Base_SetConfig+0x38>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a38      	ldr	r2, [pc, #224]	; (8005838 <TIM_Base_SetConfig+0x10c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_Base_SetConfig+0x38>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a37      	ldr	r2, [pc, #220]	; (800583c <TIM_Base_SetConfig+0x110>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d108      	bne.n	8005776 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2d      	ldr	r2, [pc, #180]	; (8005830 <TIM_Base_SetConfig+0x104>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01b      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005784:	d017      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2a      	ldr	r2, [pc, #168]	; (8005834 <TIM_Base_SetConfig+0x108>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a29      	ldr	r2, [pc, #164]	; (8005838 <TIM_Base_SetConfig+0x10c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00f      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a28      	ldr	r2, [pc, #160]	; (800583c <TIM_Base_SetConfig+0x110>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a27      	ldr	r2, [pc, #156]	; (8005840 <TIM_Base_SetConfig+0x114>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a26      	ldr	r2, [pc, #152]	; (8005844 <TIM_Base_SetConfig+0x118>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_Base_SetConfig+0x8a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a25      	ldr	r2, [pc, #148]	; (8005848 <TIM_Base_SetConfig+0x11c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d108      	bne.n	80057c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a10      	ldr	r2, [pc, #64]	; (8005830 <TIM_Base_SetConfig+0x104>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00f      	beq.n	8005814 <TIM_Base_SetConfig+0xe8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a11      	ldr	r2, [pc, #68]	; (800583c <TIM_Base_SetConfig+0x110>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_Base_SetConfig+0xe8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a10      	ldr	r2, [pc, #64]	; (8005840 <TIM_Base_SetConfig+0x114>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <TIM_Base_SetConfig+0xe8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a0f      	ldr	r2, [pc, #60]	; (8005844 <TIM_Base_SetConfig+0x118>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0xe8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a0e      	ldr	r2, [pc, #56]	; (8005848 <TIM_Base_SetConfig+0x11c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	615a      	str	r2, [r3, #20]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40013400 	.word	0x40013400
 8005840:	40014000 	.word	0x40014000
 8005844:	40014400 	.word	0x40014400
 8005848:	40014800 	.word	0x40014800

0800584c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 0201 	bic.w	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a24      	ldr	r2, [pc, #144]	; (8005908 <TIM_TI1_SetConfig+0xbc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <TIM_TI1_SetConfig+0x56>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d00f      	beq.n	80058a2 <TIM_TI1_SetConfig+0x56>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4a21      	ldr	r2, [pc, #132]	; (800590c <TIM_TI1_SetConfig+0xc0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00b      	beq.n	80058a2 <TIM_TI1_SetConfig+0x56>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a20      	ldr	r2, [pc, #128]	; (8005910 <TIM_TI1_SetConfig+0xc4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <TIM_TI1_SetConfig+0x56>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <TIM_TI1_SetConfig+0xc8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_TI1_SetConfig+0x56>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <TIM_TI1_SetConfig+0xcc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d101      	bne.n	80058a6 <TIM_TI1_SetConfig+0x5a>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <TIM_TI1_SetConfig+0x5c>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	e003      	b.n	80058c6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f023 030a 	bic.w	r3, r3, #10
 80058e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 030a 	and.w	r3, r3, #10
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40013400 	.word	0x40013400
 8005918:	40014000 	.word	0x40014000

0800591c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f023 0210 	bic.w	r2, r3, #16
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800595a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	031b      	lsls	r3, r3, #12
 8005960:	b29b      	uxth	r3, r3
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800596e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005996:	b480      	push	{r7}
 8005998:	b087      	sub	sp, #28
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0303 	bic.w	r3, r3, #3
 80059c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80059e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b087      	sub	sp, #28
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	031b      	lsls	r3, r3, #12
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	031b      	lsls	r3, r3, #12
 8005a66:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	621a      	str	r2, [r3, #32]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1a      	ldr	r2, [r3, #32]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	401a      	ands	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e065      	b.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2c      	ldr	r2, [pc, #176]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2b      	ldr	r2, [pc, #172]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d108      	bne.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d018      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b62:	d013      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00e      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d009      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a13      	ldr	r2, [pc, #76]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10c      	bne.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40013400 	.word	0x40013400
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40014000 	.word	0x40014000

08005bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e042      	b.n	8005cfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7fc fe39 	bl	8002900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2224      	movs	r2, #36	; 0x24
 8005c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0201 	bic.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fb4a 	bl	8006340 <UART_SetConfig>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e022      	b.n	8005cfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fddc 	bl	800687c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fe63 	bl	80069c0 <UART_CheckIdleState>
 8005cfa:	4603      	mov	r3, r0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d168      	bne.n	8005dee <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_UART_Transmit_IT+0x24>
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e061      	b.n	8005df0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_UART_Transmit_IT+0x36>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e05a      	b.n	8005df0 <HAL_UART_Transmit_IT+0xec>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	88fa      	ldrh	r2, [r7, #6]
 8005d4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	88fa      	ldrh	r2, [r7, #6]
 8005d54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2221      	movs	r2, #33	; 0x21
 8005d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d76:	d11c      	bne.n	8005db2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d80:	d107      	bne.n	8005d92 <HAL_UART_Transmit_IT+0x8e>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <HAL_UART_Transmit_IT+0xf8>)
 8005d8e:	675a      	str	r2, [r3, #116]	; 0x74
 8005d90:	e002      	b.n	8005d98 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <HAL_UART_Transmit_IT+0xfc>)
 8005d96:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	e01b      	b.n	8005dea <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dba:	d107      	bne.n	8005dcc <HAL_UART_Transmit_IT+0xc8>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a0f      	ldr	r2, [pc, #60]	; (8005e04 <HAL_UART_Transmit_IT+0x100>)
 8005dc8:	675a      	str	r2, [r3, #116]	; 0x74
 8005dca:	e002      	b.n	8005dd2 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4a0e      	ldr	r2, [pc, #56]	; (8005e08 <HAL_UART_Transmit_IT+0x104>)
 8005dd0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005de8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e000      	b.n	8005df0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
  }
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	08006ef1 	.word	0x08006ef1
 8005e00:	08006e57 	.word	0x08006e57
 8005e04:	08006dd9 	.word	0x08006dd9
 8005e08:	08006d65 	.word	0x08006d65

08005e0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d131      	bne.n	8005e88 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_UART_Receive_IT+0x24>
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e02a      	b.n	8005e8a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_UART_Receive_IT+0x36>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e023      	b.n	8005e8a <HAL_UART_Receive_IT+0x7e>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a0f      	ldr	r2, [pc, #60]	; (8005e94 <HAL_UART_Receive_IT+0x88>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00e      	beq.n	8005e78 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005e76:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e78:	88fb      	ldrh	r3, [r7, #6]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fe6a 	bl	8006b58 <UART_Start_Receive_IT>
 8005e84:	4603      	mov	r3, r0
 8005e86:	e000      	b.n	8005e8a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
  }
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40008000 	.word	0x40008000

08005e98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d118      	bne.n	8005efa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d013      	beq.n	8005efa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 81fb 	beq.w	80062e6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
      }
      return;
 8005ef8:	e1f5      	b.n	80062e6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80ef 	beq.w	80060e0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4b73      	ldr	r3, [pc, #460]	; (80060d4 <HAL_UART_IRQHandler+0x23c>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4b72      	ldr	r3, [pc, #456]	; (80060d8 <HAL_UART_IRQHandler+0x240>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 80e4 	beq.w	80060e0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d010      	beq.n	8005f44 <HAL_UART_IRQHandler+0xac>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00b      	beq.n	8005f44 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2201      	movs	r2, #1
 8005f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3a:	f043 0201 	orr.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d010      	beq.n	8005f70 <HAL_UART_IRQHandler+0xd8>
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f66:	f043 0204 	orr.w	r2, r3, #4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d010      	beq.n	8005f9c <HAL_UART_IRQHandler+0x104>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2204      	movs	r2, #4
 8005f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f92:	f043 0202 	orr.w	r2, r3, #2
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d015      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4b48      	ldr	r3, [pc, #288]	; (80060d4 <HAL_UART_IRQHandler+0x23c>)
 8005fb4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00b      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc8:	f043 0208 	orr.w	r2, r3, #8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d011      	beq.n	8006000 <HAL_UART_IRQHandler+0x168>
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 816f 	beq.w	80062ea <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d011      	beq.n	800603a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006040:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d004      	beq.n	800605a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006056:	2b00      	cmp	r3, #0
 8006058:	d031      	beq.n	80060be <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fe3a 	bl	8006cd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d123      	bne.n	80060b6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d013      	beq.n	80060ae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608a:	4a14      	ldr	r2, [pc, #80]	; (80060dc <HAL_UART_IRQHandler+0x244>)
 800608c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006092:	4618      	mov	r0, r3
 8006094:	f7fc fea2 	bl	8002ddc <HAL_DMA_Abort_IT>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d017      	beq.n	80060ce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	e00f      	b.n	80060ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f930 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	e00b      	b.n	80060ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f92c 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	e007      	b.n	80060ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f928 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80060cc:	e10d      	b.n	80062ea <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ce:	bf00      	nop
    return;
 80060d0:	e10b      	b.n	80062ea <HAL_UART_IRQHandler+0x452>
 80060d2:	bf00      	nop
 80060d4:	10000001 	.word	0x10000001
 80060d8:	04000120 	.word	0x04000120
 80060dc:	08006d39 	.word	0x08006d39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	f040 80ab 	bne.w	8006240 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80a5 	beq.w	8006240 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 809f 	beq.w	8006240 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2210      	movs	r2, #16
 8006108:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d155      	bne.n	80061c4 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006122:	893b      	ldrh	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 80e2 	beq.w	80062ee <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006130:	893a      	ldrh	r2, [r7, #8]
 8006132:	429a      	cmp	r2, r3
 8006134:	f080 80db 	bcs.w	80062ee <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	893a      	ldrh	r2, [r7, #8]
 800613c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d12b      	bne.n	80061a8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800615e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0210 	bic.w	r2, r2, #16
 800619c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fc fdc1 	bl	8002d2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f8b3 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061c2:	e094      	b.n	80062ee <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8087 	beq.w	80062f2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 80061e4:	897b      	ldrh	r3, [r7, #10]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 8083 	beq.w	80062f2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061fa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0210 	bic.w	r2, r2, #16
 8006232:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006234:	897b      	ldrh	r3, [r7, #10]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f875 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800623e:	e058      	b.n	80062f2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <HAL_UART_IRQHandler+0x3ce>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800625c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 f98e 	bl	8007580 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006264:	e048      	b.n	80062f8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626c:	2b00      	cmp	r3, #0
 800626e:	d012      	beq.n	8006296 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006288:	2b00      	cmp	r3, #0
 800628a:	d034      	beq.n	80062f6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
    }
    return;
 8006294:	e02f      	b.n	80062f6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_UART_IRQHandler+0x41a>
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fe72 	bl	8006f94 <UART_EndTransmit_IT>
    return;
 80062b0:	e022      	b.n	80062f8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_UART_IRQHandler+0x436>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f96e 	bl	80075a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062cc:	e014      	b.n	80062f8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00f      	beq.n	80062f8 <HAL_UART_IRQHandler+0x460>
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da0c      	bge.n	80062f8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 f958 	bl	8007594 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062e4:	e008      	b.n	80062f8 <HAL_UART_IRQHandler+0x460>
      return;
 80062e6:	bf00      	nop
 80062e8:	e006      	b.n	80062f8 <HAL_UART_IRQHandler+0x460>
    return;
 80062ea:	bf00      	nop
 80062ec:	e004      	b.n	80062f8 <HAL_UART_IRQHandler+0x460>
      return;
 80062ee:	bf00      	nop
 80062f0:	e002      	b.n	80062f8 <HAL_UART_IRQHandler+0x460>
      return;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_UART_IRQHandler+0x460>
    return;
 80062f6:	bf00      	nop
  }
}
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop

08006300 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006340:	b5b0      	push	{r4, r5, r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	4313      	orrs	r3, r2
 8006362:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4baf      	ldr	r3, [pc, #700]	; (8006628 <UART_SetConfig+0x2e8>)
 800636c:	4013      	ands	r3, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	69f9      	ldr	r1, [r7, #28]
 8006374:	430b      	orrs	r3, r1
 8006376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4aa4      	ldr	r2, [pc, #656]	; (800662c <UART_SetConfig+0x2ec>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80063b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	69f9      	ldr	r1, [r7, #28]
 80063bc:	430b      	orrs	r3, r1
 80063be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	f023 010f 	bic.w	r1, r3, #15
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a95      	ldr	r2, [pc, #596]	; (8006630 <UART_SetConfig+0x2f0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d120      	bne.n	8006422 <UART_SetConfig+0xe2>
 80063e0:	4b94      	ldr	r3, [pc, #592]	; (8006634 <UART_SetConfig+0x2f4>)
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d816      	bhi.n	800641c <UART_SetConfig+0xdc>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0xb4>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006405 	.word	0x08006405
 80063f8:	08006411 	.word	0x08006411
 80063fc:	0800640b 	.word	0x0800640b
 8006400:	08006417 	.word	0x08006417
 8006404:	2301      	movs	r3, #1
 8006406:	76fb      	strb	r3, [r7, #27]
 8006408:	e0bc      	b.n	8006584 <UART_SetConfig+0x244>
 800640a:	2302      	movs	r3, #2
 800640c:	76fb      	strb	r3, [r7, #27]
 800640e:	e0b9      	b.n	8006584 <UART_SetConfig+0x244>
 8006410:	2304      	movs	r3, #4
 8006412:	76fb      	strb	r3, [r7, #27]
 8006414:	e0b6      	b.n	8006584 <UART_SetConfig+0x244>
 8006416:	2308      	movs	r3, #8
 8006418:	76fb      	strb	r3, [r7, #27]
 800641a:	e0b3      	b.n	8006584 <UART_SetConfig+0x244>
 800641c:	2310      	movs	r3, #16
 800641e:	76fb      	strb	r3, [r7, #27]
 8006420:	e0b0      	b.n	8006584 <UART_SetConfig+0x244>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a84      	ldr	r2, [pc, #528]	; (8006638 <UART_SetConfig+0x2f8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d132      	bne.n	8006492 <UART_SetConfig+0x152>
 800642c:	4b81      	ldr	r3, [pc, #516]	; (8006634 <UART_SetConfig+0x2f4>)
 800642e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006432:	f003 030c 	and.w	r3, r3, #12
 8006436:	2b0c      	cmp	r3, #12
 8006438:	d828      	bhi.n	800648c <UART_SetConfig+0x14c>
 800643a:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <UART_SetConfig+0x100>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	08006475 	.word	0x08006475
 8006444:	0800648d 	.word	0x0800648d
 8006448:	0800648d 	.word	0x0800648d
 800644c:	0800648d 	.word	0x0800648d
 8006450:	08006481 	.word	0x08006481
 8006454:	0800648d 	.word	0x0800648d
 8006458:	0800648d 	.word	0x0800648d
 800645c:	0800648d 	.word	0x0800648d
 8006460:	0800647b 	.word	0x0800647b
 8006464:	0800648d 	.word	0x0800648d
 8006468:	0800648d 	.word	0x0800648d
 800646c:	0800648d 	.word	0x0800648d
 8006470:	08006487 	.word	0x08006487
 8006474:	2300      	movs	r3, #0
 8006476:	76fb      	strb	r3, [r7, #27]
 8006478:	e084      	b.n	8006584 <UART_SetConfig+0x244>
 800647a:	2302      	movs	r3, #2
 800647c:	76fb      	strb	r3, [r7, #27]
 800647e:	e081      	b.n	8006584 <UART_SetConfig+0x244>
 8006480:	2304      	movs	r3, #4
 8006482:	76fb      	strb	r3, [r7, #27]
 8006484:	e07e      	b.n	8006584 <UART_SetConfig+0x244>
 8006486:	2308      	movs	r3, #8
 8006488:	76fb      	strb	r3, [r7, #27]
 800648a:	e07b      	b.n	8006584 <UART_SetConfig+0x244>
 800648c:	2310      	movs	r3, #16
 800648e:	76fb      	strb	r3, [r7, #27]
 8006490:	e078      	b.n	8006584 <UART_SetConfig+0x244>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a69      	ldr	r2, [pc, #420]	; (800663c <UART_SetConfig+0x2fc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d120      	bne.n	80064de <UART_SetConfig+0x19e>
 800649c:	4b65      	ldr	r3, [pc, #404]	; (8006634 <UART_SetConfig+0x2f4>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064a6:	2b30      	cmp	r3, #48	; 0x30
 80064a8:	d013      	beq.n	80064d2 <UART_SetConfig+0x192>
 80064aa:	2b30      	cmp	r3, #48	; 0x30
 80064ac:	d814      	bhi.n	80064d8 <UART_SetConfig+0x198>
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d009      	beq.n	80064c6 <UART_SetConfig+0x186>
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d810      	bhi.n	80064d8 <UART_SetConfig+0x198>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <UART_SetConfig+0x180>
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d006      	beq.n	80064cc <UART_SetConfig+0x18c>
 80064be:	e00b      	b.n	80064d8 <UART_SetConfig+0x198>
 80064c0:	2300      	movs	r3, #0
 80064c2:	76fb      	strb	r3, [r7, #27]
 80064c4:	e05e      	b.n	8006584 <UART_SetConfig+0x244>
 80064c6:	2302      	movs	r3, #2
 80064c8:	76fb      	strb	r3, [r7, #27]
 80064ca:	e05b      	b.n	8006584 <UART_SetConfig+0x244>
 80064cc:	2304      	movs	r3, #4
 80064ce:	76fb      	strb	r3, [r7, #27]
 80064d0:	e058      	b.n	8006584 <UART_SetConfig+0x244>
 80064d2:	2308      	movs	r3, #8
 80064d4:	76fb      	strb	r3, [r7, #27]
 80064d6:	e055      	b.n	8006584 <UART_SetConfig+0x244>
 80064d8:	2310      	movs	r3, #16
 80064da:	76fb      	strb	r3, [r7, #27]
 80064dc:	e052      	b.n	8006584 <UART_SetConfig+0x244>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a57      	ldr	r2, [pc, #348]	; (8006640 <UART_SetConfig+0x300>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d120      	bne.n	800652a <UART_SetConfig+0x1ea>
 80064e8:	4b52      	ldr	r3, [pc, #328]	; (8006634 <UART_SetConfig+0x2f4>)
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064f2:	2bc0      	cmp	r3, #192	; 0xc0
 80064f4:	d013      	beq.n	800651e <UART_SetConfig+0x1de>
 80064f6:	2bc0      	cmp	r3, #192	; 0xc0
 80064f8:	d814      	bhi.n	8006524 <UART_SetConfig+0x1e4>
 80064fa:	2b80      	cmp	r3, #128	; 0x80
 80064fc:	d009      	beq.n	8006512 <UART_SetConfig+0x1d2>
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d810      	bhi.n	8006524 <UART_SetConfig+0x1e4>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <UART_SetConfig+0x1cc>
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d006      	beq.n	8006518 <UART_SetConfig+0x1d8>
 800650a:	e00b      	b.n	8006524 <UART_SetConfig+0x1e4>
 800650c:	2300      	movs	r3, #0
 800650e:	76fb      	strb	r3, [r7, #27]
 8006510:	e038      	b.n	8006584 <UART_SetConfig+0x244>
 8006512:	2302      	movs	r3, #2
 8006514:	76fb      	strb	r3, [r7, #27]
 8006516:	e035      	b.n	8006584 <UART_SetConfig+0x244>
 8006518:	2304      	movs	r3, #4
 800651a:	76fb      	strb	r3, [r7, #27]
 800651c:	e032      	b.n	8006584 <UART_SetConfig+0x244>
 800651e:	2308      	movs	r3, #8
 8006520:	76fb      	strb	r3, [r7, #27]
 8006522:	e02f      	b.n	8006584 <UART_SetConfig+0x244>
 8006524:	2310      	movs	r3, #16
 8006526:	76fb      	strb	r3, [r7, #27]
 8006528:	e02c      	b.n	8006584 <UART_SetConfig+0x244>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a3f      	ldr	r2, [pc, #252]	; (800662c <UART_SetConfig+0x2ec>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d125      	bne.n	8006580 <UART_SetConfig+0x240>
 8006534:	4b3f      	ldr	r3, [pc, #252]	; (8006634 <UART_SetConfig+0x2f4>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800653e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006542:	d017      	beq.n	8006574 <UART_SetConfig+0x234>
 8006544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006548:	d817      	bhi.n	800657a <UART_SetConfig+0x23a>
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654e:	d00b      	beq.n	8006568 <UART_SetConfig+0x228>
 8006550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006554:	d811      	bhi.n	800657a <UART_SetConfig+0x23a>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <UART_SetConfig+0x222>
 800655a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655e:	d006      	beq.n	800656e <UART_SetConfig+0x22e>
 8006560:	e00b      	b.n	800657a <UART_SetConfig+0x23a>
 8006562:	2300      	movs	r3, #0
 8006564:	76fb      	strb	r3, [r7, #27]
 8006566:	e00d      	b.n	8006584 <UART_SetConfig+0x244>
 8006568:	2302      	movs	r3, #2
 800656a:	76fb      	strb	r3, [r7, #27]
 800656c:	e00a      	b.n	8006584 <UART_SetConfig+0x244>
 800656e:	2304      	movs	r3, #4
 8006570:	76fb      	strb	r3, [r7, #27]
 8006572:	e007      	b.n	8006584 <UART_SetConfig+0x244>
 8006574:	2308      	movs	r3, #8
 8006576:	76fb      	strb	r3, [r7, #27]
 8006578:	e004      	b.n	8006584 <UART_SetConfig+0x244>
 800657a:	2310      	movs	r3, #16
 800657c:	76fb      	strb	r3, [r7, #27]
 800657e:	e001      	b.n	8006584 <UART_SetConfig+0x244>
 8006580:	2310      	movs	r3, #16
 8006582:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a28      	ldr	r2, [pc, #160]	; (800662c <UART_SetConfig+0x2ec>)
 800658a:	4293      	cmp	r3, r2
 800658c:	f040 809e 	bne.w	80066cc <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006590:	7efb      	ldrb	r3, [r7, #27]
 8006592:	2b08      	cmp	r3, #8
 8006594:	d823      	bhi.n	80065de <UART_SetConfig+0x29e>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <UART_SetConfig+0x25c>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065df 	.word	0x080065df
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065df 	.word	0x080065df
 80065ac:	080065cf 	.word	0x080065cf
 80065b0:	080065df 	.word	0x080065df
 80065b4:	080065df 	.word	0x080065df
 80065b8:	080065df 	.word	0x080065df
 80065bc:	080065d7 	.word	0x080065d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c0:	f7fe fa48 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 80065c4:	6178      	str	r0, [r7, #20]
        break;
 80065c6:	e00f      	b.n	80065e8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c8:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <UART_SetConfig+0x304>)
 80065ca:	617b      	str	r3, [r7, #20]
        break;
 80065cc:	e00c      	b.n	80065e8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ce:	f7fe f9d3 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80065d2:	6178      	str	r0, [r7, #20]
        break;
 80065d4:	e008      	b.n	80065e8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	617b      	str	r3, [r7, #20]
        break;
 80065dc:	e004      	b.n	80065e8 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	76bb      	strb	r3, [r7, #26]
        break;
 80065e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 812e 	beq.w	800684c <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	4a14      	ldr	r2, [pc, #80]	; (8006648 <UART_SetConfig+0x308>)
 80065f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065fa:	461a      	mov	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006602:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	4413      	add	r3, r2
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	429a      	cmp	r2, r3
 8006612:	d305      	bcc.n	8006620 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	d915      	bls.n	800664c <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	76bb      	strb	r3, [r7, #26]
 8006624:	e112      	b.n	800684c <UART_SetConfig+0x50c>
 8006626:	bf00      	nop
 8006628:	cfff69f3 	.word	0xcfff69f3
 800662c:	40008000 	.word	0x40008000
 8006630:	40013800 	.word	0x40013800
 8006634:	40021000 	.word	0x40021000
 8006638:	40004400 	.word	0x40004400
 800663c:	40004800 	.word	0x40004800
 8006640:	40004c00 	.word	0x40004c00
 8006644:	00f42400 	.word	0x00f42400
 8006648:	080081cc 	.word	0x080081cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	4618      	mov	r0, r3
 8006650:	f04f 0100 	mov.w	r1, #0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	4a86      	ldr	r2, [pc, #536]	; (8006874 <UART_SetConfig+0x534>)
 800665a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800665e:	b29a      	uxth	r2, r3
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	f7fa faa2 	bl	8000bac <__aeabi_uldivmod>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4610      	mov	r0, r2
 800666e:	4619      	mov	r1, r3
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	020b      	lsls	r3, r1, #8
 800667a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800667e:	0202      	lsls	r2, r0, #8
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	6849      	ldr	r1, [r1, #4]
 8006684:	0849      	lsrs	r1, r1, #1
 8006686:	4608      	mov	r0, r1
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	1814      	adds	r4, r2, r0
 800668e:	eb43 0501 	adc.w	r5, r3, r1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	461a      	mov	r2, r3
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	4620      	mov	r0, r4
 800669e:	4629      	mov	r1, r5
 80066a0:	f7fa fa84 	bl	8000bac <__aeabi_uldivmod>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4613      	mov	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b2:	d308      	bcc.n	80066c6 <UART_SetConfig+0x386>
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ba:	d204      	bcs.n	80066c6 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	60da      	str	r2, [r3, #12]
 80066c4:	e0c2      	b.n	800684c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	76bb      	strb	r3, [r7, #26]
 80066ca:	e0bf      	b.n	800684c <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d4:	d165      	bne.n	80067a2 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 80066d6:	7efb      	ldrb	r3, [r7, #27]
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d828      	bhi.n	800672e <UART_SetConfig+0x3ee>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <UART_SetConfig+0x3a4>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006709 	.word	0x08006709
 80066e8:	08006711 	.word	0x08006711
 80066ec:	08006719 	.word	0x08006719
 80066f0:	0800672f 	.word	0x0800672f
 80066f4:	0800671f 	.word	0x0800671f
 80066f8:	0800672f 	.word	0x0800672f
 80066fc:	0800672f 	.word	0x0800672f
 8006700:	0800672f 	.word	0x0800672f
 8006704:	08006727 	.word	0x08006727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006708:	f7fe f9a4 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 800670c:	6178      	str	r0, [r7, #20]
        break;
 800670e:	e013      	b.n	8006738 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006710:	f7fe f9b6 	bl	8004a80 <HAL_RCC_GetPCLK2Freq>
 8006714:	6178      	str	r0, [r7, #20]
        break;
 8006716:	e00f      	b.n	8006738 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006718:	4b57      	ldr	r3, [pc, #348]	; (8006878 <UART_SetConfig+0x538>)
 800671a:	617b      	str	r3, [r7, #20]
        break;
 800671c:	e00c      	b.n	8006738 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800671e:	f7fe f92b 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006722:	6178      	str	r0, [r7, #20]
        break;
 8006724:	e008      	b.n	8006738 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672a:	617b      	str	r3, [r7, #20]
        break;
 800672c:	e004      	b.n	8006738 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	76bb      	strb	r3, [r7, #26]
        break;
 8006736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8086 	beq.w	800684c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	4a4b      	ldr	r2, [pc, #300]	; (8006874 <UART_SetConfig+0x534>)
 8006746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674a:	461a      	mov	r2, r3
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006752:	005a      	lsls	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	441a      	add	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	fbb2 f3f3 	udiv	r3, r2, r3
 8006764:	b29b      	uxth	r3, r3
 8006766:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b0f      	cmp	r3, #15
 800676c:	d916      	bls.n	800679c <UART_SetConfig+0x45c>
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006774:	d212      	bcs.n	800679c <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f023 030f 	bic.w	r3, r3, #15
 800677e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	b29a      	uxth	r2, r3
 800678c:	89fb      	ldrh	r3, [r7, #14]
 800678e:	4313      	orrs	r3, r2
 8006790:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	89fa      	ldrh	r2, [r7, #14]
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	e057      	b.n	800684c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	76bb      	strb	r3, [r7, #26]
 80067a0:	e054      	b.n	800684c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067a2:	7efb      	ldrb	r3, [r7, #27]
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d828      	bhi.n	80067fa <UART_SetConfig+0x4ba>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x470>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067dd 	.word	0x080067dd
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	080067fb 	.word	0x080067fb
 80067c0:	080067eb 	.word	0x080067eb
 80067c4:	080067fb 	.word	0x080067fb
 80067c8:	080067fb 	.word	0x080067fb
 80067cc:	080067fb 	.word	0x080067fb
 80067d0:	080067f3 	.word	0x080067f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d4:	f7fe f93e 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 80067d8:	6178      	str	r0, [r7, #20]
        break;
 80067da:	e013      	b.n	8006804 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067dc:	f7fe f950 	bl	8004a80 <HAL_RCC_GetPCLK2Freq>
 80067e0:	6178      	str	r0, [r7, #20]
        break;
 80067e2:	e00f      	b.n	8006804 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067e4:	4b24      	ldr	r3, [pc, #144]	; (8006878 <UART_SetConfig+0x538>)
 80067e6:	617b      	str	r3, [r7, #20]
        break;
 80067e8:	e00c      	b.n	8006804 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ea:	f7fe f8c5 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80067ee:	6178      	str	r0, [r7, #20]
        break;
 80067f0:	e008      	b.n	8006804 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067f6:	617b      	str	r3, [r7, #20]
        break;
 80067f8:	e004      	b.n	8006804 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	76bb      	strb	r3, [r7, #26]
        break;
 8006802:	bf00      	nop
    }

    if (pclk != 0U)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d020      	beq.n	800684c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	4a19      	ldr	r2, [pc, #100]	; (8006874 <UART_SetConfig+0x534>)
 8006810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006814:	461a      	mov	r2, r3
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	fbb3 f2f2 	udiv	r2, r3, r2
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	441a      	add	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	b29b      	uxth	r3, r3
 800682e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d908      	bls.n	8006848 <UART_SetConfig+0x508>
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d204      	bcs.n	8006848 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	e001      	b.n	800684c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006868:	7ebb      	ldrb	r3, [r7, #26]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3720      	adds	r7, #32
 800686e:	46bd      	mov	sp, r7
 8006870:	bdb0      	pop	{r4, r5, r7, pc}
 8006872:	bf00      	nop
 8006874:	080081cc 	.word	0x080081cc
 8006878:	00f42400 	.word	0x00f42400

0800687c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01a      	beq.n	8006992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697a:	d10a      	bne.n	8006992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d0:	f7fc f86e 	bl	8002ab0 <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d10e      	bne.n	8006a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f82f 	bl	8006a56 <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e025      	b.n	8006a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d10e      	bne.n	8006a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f819 	bl	8006a56 <UART_WaitOnFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e00f      	b.n	8006a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	603b      	str	r3, [r7, #0]
 8006a62:	4613      	mov	r3, r2
 8006a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a66:	e062      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d05e      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a70:	f7fc f81e 	bl	8002ab0 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d11d      	bne.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0201 	bic.w	r2, r2, #1
 8006aa4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e045      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d02e      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ade:	d126      	bne.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006af8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0201 	bic.w	r2, r2, #1
 8006b08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e00f      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4013      	ands	r3, r2
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	bf0c      	ite	eq
 8006b3e:	2301      	moveq	r3, #1
 8006b40:	2300      	movne	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d08d      	beq.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	d10e      	bne.n	8006baa <UART_Start_Receive_IT+0x52>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <UART_Start_Receive_IT+0x48>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b9e:	e02d      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	22ff      	movs	r2, #255	; 0xff
 8006ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ba8:	e028      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <UART_Start_Receive_IT+0x76>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <UART_Start_Receive_IT+0x6c>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	22ff      	movs	r2, #255	; 0xff
 8006bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bc2:	e01b      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	227f      	movs	r2, #127	; 0x7f
 8006bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bcc:	e016      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bd6:	d10d      	bne.n	8006bf4 <UART_Start_Receive_IT+0x9c>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <UART_Start_Receive_IT+0x92>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	227f      	movs	r2, #127	; 0x7f
 8006be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006be8:	e008      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	223f      	movs	r2, #63	; 0x3f
 8006bee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bf2:	e003      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2222      	movs	r2, #34	; 0x22
 8006c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c24:	d12a      	bne.n	8006c7c <UART_Start_Receive_IT+0x124>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c2c:	88fa      	ldrh	r2, [r7, #6]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d324      	bcc.n	8006c7c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3a:	d107      	bne.n	8006c4c <UART_Start_Receive_IT+0xf4>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d103      	bne.n	8006c4c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <UART_Start_Receive_IT+0x16c>)
 8006c48:	671a      	str	r2, [r3, #112]	; 0x70
 8006c4a:	e002      	b.n	8006c52 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <UART_Start_Receive_IT+0x170>)
 8006c50:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c68:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c78:	609a      	str	r2, [r3, #8]
 8006c7a:	e01b      	b.n	8006cb4 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c84:	d107      	bne.n	8006c96 <UART_Start_Receive_IT+0x13e>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4a0e      	ldr	r2, [pc, #56]	; (8006ccc <UART_Start_Receive_IT+0x174>)
 8006c92:	671a      	str	r2, [r3, #112]	; 0x70
 8006c94:	e002      	b.n	8006c9c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4a0d      	ldr	r2, [pc, #52]	; (8006cd0 <UART_Start_Receive_IT+0x178>)
 8006c9a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006cb2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	0800737d 	.word	0x0800737d
 8006cc8:	08007179 	.word	0x08007179
 8006ccc:	080070a1 	.word	0x080070a1
 8006cd0:	08006fc9 	.word	0x08006fc9

08006cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	f023 0301 	bic.w	r3, r3, #1
 8006cfe:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d107      	bne.n	8006d18 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0210 	bic.w	r2, r2, #16
 8006d16:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff fadc 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d72:	2b21      	cmp	r3, #33	; 0x21
 8006d74:	d12a      	bne.n	8006dcc <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d110      	bne.n	8006da4 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d90:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006da2:	e013      	b.n	8006dcc <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da8:	781a      	ldrb	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de6:	2b21      	cmp	r3, #33	; 0x21
 8006de8:	d12f      	bne.n	8006e4a <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d110      	bne.n	8006e18 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e04:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e14:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006e16:	e018      	b.n	8006e4a <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e2c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e32:	1c9a      	adds	r2, r3, #2
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e64:	2b21      	cmp	r3, #33	; 0x21
 8006e66:	d13d      	bne.n	8006ee4 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e6e:	81fb      	strh	r3, [r7, #14]
 8006e70:	e035      	b.n	8006ede <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d111      	bne.n	8006ea2 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006e8c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e9c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006e9e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006ea0:	e020      	b.n	8006ee4 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d013      	beq.n	8006ed8 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb4:	781a      	ldrb	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006ed8:	89fb      	ldrh	r3, [r7, #14]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	81fb      	strh	r3, [r7, #14]
 8006ede:	89fb      	ldrh	r3, [r7, #14]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1c6      	bne.n	8006e72 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006efe:	2b21      	cmp	r3, #33	; 0x21
 8006f00:	d142      	bne.n	8006f88 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f08:	81fb      	strh	r3, [r7, #14]
 8006f0a:	e03a      	b.n	8006f82 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d111      	bne.n	8006f3c <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006f26:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f36:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006f38:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006f3a:	e025      	b.n	8006f88 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d018      	beq.n	8006f7c <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4e:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f5e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f64:	1c9a      	adds	r2, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	81fb      	strh	r3, [r7, #14]
 8006f82:	89fb      	ldrh	r3, [r7, #14]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1c1      	bne.n	8006f0c <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006faa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff f9a0 	bl	8006300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006fd6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fde:	2b22      	cmp	r3, #34	; 0x22
 8006fe0:	d152      	bne.n	8007088 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fea:	89bb      	ldrh	r3, [r7, #12]
 8006fec:	b2d9      	uxtb	r1, r3
 8006fee:	89fb      	ldrh	r3, [r7, #14]
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff6:	400a      	ands	r2, r1
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d139      	bne.n	8007098 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007032:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10f      	bne.n	800707a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0210 	bic.w	r2, r2, #16
 8007068:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff f958 	bl	8006328 <HAL_UARTEx_RxEventCallback>
 8007078:	e002      	b.n	8007080 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fa fb54 	bl	8001728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007086:	e007      	b.n	8007098 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0208 	orr.w	r2, r2, #8
 8007096:	619a      	str	r2, [r3, #24]
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070ae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b6:	2b22      	cmp	r3, #34	; 0x22
 80070b8:	d152      	bne.n	8007160 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80070c8:	89ba      	ldrh	r2, [r7, #12]
 80070ca:	89fb      	ldrh	r3, [r7, #14]
 80070cc:	4013      	ands	r3, r2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d8:	1c9a      	adds	r2, r3, #2
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d139      	bne.n	8007170 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800710a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0201 	bic.w	r2, r2, #1
 800711a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712e:	2b01      	cmp	r3, #1
 8007130:	d10f      	bne.n	8007152 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0210 	bic.w	r2, r2, #16
 8007140:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff f8ec 	bl	8006328 <HAL_UARTEx_RxEventCallback>
 8007150:	e002      	b.n	8007158 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fa fae8 	bl	8001728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800715e:	e007      	b.n	8007170 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0208 	orr.w	r2, r2, #8
 800716e:	619a      	str	r2, [r3, #24]
}
 8007170:	bf00      	nop
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007186:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a6:	2b22      	cmp	r3, #34	; 0x22
 80071a8:	f040 80da 	bne.w	8007360 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071b2:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071b4:	e0aa      	b.n	800730c <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071be:	89bb      	ldrh	r3, [r7, #12]
 80071c0:	b2d9      	uxtb	r1, r3
 80071c2:	8b7b      	ldrh	r3, [r7, #26]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ca:	400a      	ands	r2, r1
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d04d      	beq.n	800729a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d010      	beq.n	800722a <UART_RxISR_8BIT_FIFOEN+0xb2>
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2201      	movs	r2, #1
 8007218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007220:	f043 0201 	orr.w	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <UART_RxISR_8BIT_FIFOEN+0xde>
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2202      	movs	r2, #2
 8007244:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800724c:	f043 0204 	orr.w	r2, r3, #4
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d010      	beq.n	8007282 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00b      	beq.n	8007282 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2204      	movs	r2, #4
 8007270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007278:	f043 0202 	orr.w	r2, r3, #2
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d006      	beq.n	800729a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff f841 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d132      	bne.n	800730c <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072b4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6812      	ldr	r2, [r2, #0]
 80072c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d10f      	bne.n	8007300 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0210 	bic.w	r2, r2, #16
 80072ee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff f815 	bl	8006328 <HAL_UARTEx_RxEventCallback>
 80072fe:	e002      	b.n	8007306 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fa fa11 	bl	8001728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800730c:	89fb      	ldrh	r3, [r7, #14]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	f47f af4c 	bne.w	80071b6 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007324:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007326:	897b      	ldrh	r3, [r7, #10]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d021      	beq.n	8007370 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007332:	897a      	ldrh	r2, [r7, #10]
 8007334:	429a      	cmp	r2, r3
 8007336:	d21b      	bcs.n	8007370 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007346:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a0b      	ldr	r2, [pc, #44]	; (8007378 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800734c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0220 	orr.w	r2, r2, #32
 800735c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800735e:	e007      	b.n	8007370 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0208 	orr.w	r2, r2, #8
 800736e:	619a      	str	r2, [r3, #24]
}
 8007370:	bf00      	nop
 8007372:	3720      	adds	r7, #32
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	08006fc9 	.word	0x08006fc9

0800737c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800738a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073aa:	2b22      	cmp	r3, #34	; 0x22
 80073ac:	f040 80da 	bne.w	8007564 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073b6:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073b8:	e0aa      	b.n	8007510 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80073c8:	8aba      	ldrh	r2, [r7, #20]
 80073ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073cc:	4013      	ands	r3, r2
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d8:	1c9a      	adds	r2, r3, #2
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d04d      	beq.n	800749e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d010      	beq.n	800742e <UART_RxISR_16BIT_FIFOEN+0xb2>
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00b      	beq.n	800742e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2201      	movs	r2, #1
 800741c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007424:	f043 0201 	orr.w	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d010      	beq.n	800745a <UART_RxISR_16BIT_FIFOEN+0xde>
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2202      	movs	r2, #2
 8007448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007450:	f043 0204 	orr.w	r2, r3, #4
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d010      	beq.n	8007486 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2204      	movs	r2, #4
 8007474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800747c:	f043 0202 	orr.w	r2, r3, #2
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d006      	beq.n	800749e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7fe ff3f 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d132      	bne.n	8007510 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074b8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6812      	ldr	r2, [r2, #0]
 80074c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c8:	f023 0301 	bic.w	r3, r3, #1
 80074cc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d10f      	bne.n	8007504 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0210 	bic.w	r2, r2, #16
 80074f2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7fe ff13 	bl	8006328 <HAL_UARTEx_RxEventCallback>
 8007502:	e002      	b.n	800750a <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fa f90f 	bl	8001728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007510:	8afb      	ldrh	r3, [r7, #22]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	f47f af4c 	bne.w	80073ba <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007528:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800752a:	89fb      	ldrh	r3, [r7, #14]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d021      	beq.n	8007574 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007536:	89fa      	ldrh	r2, [r7, #14]
 8007538:	429a      	cmp	r2, r3
 800753a:	d21b      	bcs.n	8007574 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800754a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a0b      	ldr	r2, [pc, #44]	; (800757c <UART_RxISR_16BIT_FIFOEN+0x200>)
 8007550:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0220 	orr.w	r2, r2, #32
 8007560:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007562:	e007      	b.n	8007574 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0208 	orr.w	r2, r2, #8
 8007572:	619a      	str	r2, [r3, #24]
}
 8007574:	bf00      	nop
 8007576:	3728      	adds	r7, #40	; 0x28
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	080070a1 	.word	0x080070a1

08007580 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e027      	b.n	8007622 <HAL_UARTEx_DisableFifoMode+0x66>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2224      	movs	r2, #36	; 0x24
 80075de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007600:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800763e:	2b01      	cmp	r3, #1
 8007640:	d101      	bne.n	8007646 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007642:	2302      	movs	r3, #2
 8007644:	e02d      	b.n	80076a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2224      	movs	r2, #36	; 0x24
 8007652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f850 	bl	8007728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d101      	bne.n	80076c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076be:	2302      	movs	r3, #2
 80076c0:	e02d      	b.n	800771e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2224      	movs	r2, #36	; 0x24
 80076ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0201 	bic.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f812 	bl	8007728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007734:	2b00      	cmp	r3, #0
 8007736:	d108      	bne.n	800774a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007748:	e031      	b.n	80077ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800774a:	2308      	movs	r3, #8
 800774c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800774e:	2308      	movs	r3, #8
 8007750:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	0e5b      	lsrs	r3, r3, #25
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 0307 	and.w	r3, r3, #7
 8007760:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	0f5b      	lsrs	r3, r3, #29
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	7b3a      	ldrb	r2, [r7, #12]
 8007776:	4911      	ldr	r1, [pc, #68]	; (80077bc <UARTEx_SetNbDataToProcess+0x94>)
 8007778:	5c8a      	ldrb	r2, [r1, r2]
 800777a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800777e:	7b3a      	ldrb	r2, [r7, #12]
 8007780:	490f      	ldr	r1, [pc, #60]	; (80077c0 <UARTEx_SetNbDataToProcess+0x98>)
 8007782:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007784:	fb93 f3f2 	sdiv	r3, r3, r2
 8007788:	b29a      	uxth	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	7b7a      	ldrb	r2, [r7, #13]
 8007794:	4909      	ldr	r1, [pc, #36]	; (80077bc <UARTEx_SetNbDataToProcess+0x94>)
 8007796:	5c8a      	ldrb	r2, [r1, r2]
 8007798:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800779c:	7b7a      	ldrb	r2, [r7, #13]
 800779e:	4908      	ldr	r1, [pc, #32]	; (80077c0 <UARTEx_SetNbDataToProcess+0x98>)
 80077a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077ae:	bf00      	nop
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	080081e4 	.word	0x080081e4
 80077c0:	080081ec 	.word	0x080081ec

080077c4 <__errno>:
 80077c4:	4b01      	ldr	r3, [pc, #4]	; (80077cc <__errno+0x8>)
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	2000000c 	.word	0x2000000c

080077d0 <__libc_init_array>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	4d0d      	ldr	r5, [pc, #52]	; (8007808 <__libc_init_array+0x38>)
 80077d4:	4c0d      	ldr	r4, [pc, #52]	; (800780c <__libc_init_array+0x3c>)
 80077d6:	1b64      	subs	r4, r4, r5
 80077d8:	10a4      	asrs	r4, r4, #2
 80077da:	2600      	movs	r6, #0
 80077dc:	42a6      	cmp	r6, r4
 80077de:	d109      	bne.n	80077f4 <__libc_init_array+0x24>
 80077e0:	4d0b      	ldr	r5, [pc, #44]	; (8007810 <__libc_init_array+0x40>)
 80077e2:	4c0c      	ldr	r4, [pc, #48]	; (8007814 <__libc_init_array+0x44>)
 80077e4:	f000 fcd0 	bl	8008188 <_init>
 80077e8:	1b64      	subs	r4, r4, r5
 80077ea:	10a4      	asrs	r4, r4, #2
 80077ec:	2600      	movs	r6, #0
 80077ee:	42a6      	cmp	r6, r4
 80077f0:	d105      	bne.n	80077fe <__libc_init_array+0x2e>
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f8:	4798      	blx	r3
 80077fa:	3601      	adds	r6, #1
 80077fc:	e7ee      	b.n	80077dc <__libc_init_array+0xc>
 80077fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007802:	4798      	blx	r3
 8007804:	3601      	adds	r6, #1
 8007806:	e7f2      	b.n	80077ee <__libc_init_array+0x1e>
 8007808:	08008230 	.word	0x08008230
 800780c:	08008230 	.word	0x08008230
 8007810:	08008230 	.word	0x08008230
 8007814:	08008234 	.word	0x08008234

08007818 <memset>:
 8007818:	4402      	add	r2, r0
 800781a:	4603      	mov	r3, r0
 800781c:	4293      	cmp	r3, r2
 800781e:	d100      	bne.n	8007822 <memset+0xa>
 8007820:	4770      	bx	lr
 8007822:	f803 1b01 	strb.w	r1, [r3], #1
 8007826:	e7f9      	b.n	800781c <memset+0x4>

08007828 <siprintf>:
 8007828:	b40e      	push	{r1, r2, r3}
 800782a:	b500      	push	{lr}
 800782c:	b09c      	sub	sp, #112	; 0x70
 800782e:	ab1d      	add	r3, sp, #116	; 0x74
 8007830:	9002      	str	r0, [sp, #8]
 8007832:	9006      	str	r0, [sp, #24]
 8007834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007838:	4809      	ldr	r0, [pc, #36]	; (8007860 <siprintf+0x38>)
 800783a:	9107      	str	r1, [sp, #28]
 800783c:	9104      	str	r1, [sp, #16]
 800783e:	4909      	ldr	r1, [pc, #36]	; (8007864 <siprintf+0x3c>)
 8007840:	f853 2b04 	ldr.w	r2, [r3], #4
 8007844:	9105      	str	r1, [sp, #20]
 8007846:	6800      	ldr	r0, [r0, #0]
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	a902      	add	r1, sp, #8
 800784c:	f000 f868 	bl	8007920 <_svfiprintf_r>
 8007850:	9b02      	ldr	r3, [sp, #8]
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	b01c      	add	sp, #112	; 0x70
 8007858:	f85d eb04 	ldr.w	lr, [sp], #4
 800785c:	b003      	add	sp, #12
 800785e:	4770      	bx	lr
 8007860:	2000000c 	.word	0x2000000c
 8007864:	ffff0208 	.word	0xffff0208

08007868 <__ssputs_r>:
 8007868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786c:	688e      	ldr	r6, [r1, #8]
 800786e:	429e      	cmp	r6, r3
 8007870:	4682      	mov	sl, r0
 8007872:	460c      	mov	r4, r1
 8007874:	4690      	mov	r8, r2
 8007876:	461f      	mov	r7, r3
 8007878:	d838      	bhi.n	80078ec <__ssputs_r+0x84>
 800787a:	898a      	ldrh	r2, [r1, #12]
 800787c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007880:	d032      	beq.n	80078e8 <__ssputs_r+0x80>
 8007882:	6825      	ldr	r5, [r4, #0]
 8007884:	6909      	ldr	r1, [r1, #16]
 8007886:	eba5 0901 	sub.w	r9, r5, r1
 800788a:	6965      	ldr	r5, [r4, #20]
 800788c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007894:	3301      	adds	r3, #1
 8007896:	444b      	add	r3, r9
 8007898:	106d      	asrs	r5, r5, #1
 800789a:	429d      	cmp	r5, r3
 800789c:	bf38      	it	cc
 800789e:	461d      	movcc	r5, r3
 80078a0:	0553      	lsls	r3, r2, #21
 80078a2:	d531      	bpl.n	8007908 <__ssputs_r+0xa0>
 80078a4:	4629      	mov	r1, r5
 80078a6:	f000 fb47 	bl	8007f38 <_malloc_r>
 80078aa:	4606      	mov	r6, r0
 80078ac:	b950      	cbnz	r0, 80078c4 <__ssputs_r+0x5c>
 80078ae:	230c      	movs	r3, #12
 80078b0:	f8ca 3000 	str.w	r3, [sl]
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	6921      	ldr	r1, [r4, #16]
 80078c6:	464a      	mov	r2, r9
 80078c8:	f000 fabe 	bl	8007e48 <memcpy>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d6:	81a3      	strh	r3, [r4, #12]
 80078d8:	6126      	str	r6, [r4, #16]
 80078da:	6165      	str	r5, [r4, #20]
 80078dc:	444e      	add	r6, r9
 80078de:	eba5 0509 	sub.w	r5, r5, r9
 80078e2:	6026      	str	r6, [r4, #0]
 80078e4:	60a5      	str	r5, [r4, #8]
 80078e6:	463e      	mov	r6, r7
 80078e8:	42be      	cmp	r6, r7
 80078ea:	d900      	bls.n	80078ee <__ssputs_r+0x86>
 80078ec:	463e      	mov	r6, r7
 80078ee:	4632      	mov	r2, r6
 80078f0:	6820      	ldr	r0, [r4, #0]
 80078f2:	4641      	mov	r1, r8
 80078f4:	f000 fab6 	bl	8007e64 <memmove>
 80078f8:	68a3      	ldr	r3, [r4, #8]
 80078fa:	6822      	ldr	r2, [r4, #0]
 80078fc:	1b9b      	subs	r3, r3, r6
 80078fe:	4432      	add	r2, r6
 8007900:	60a3      	str	r3, [r4, #8]
 8007902:	6022      	str	r2, [r4, #0]
 8007904:	2000      	movs	r0, #0
 8007906:	e7db      	b.n	80078c0 <__ssputs_r+0x58>
 8007908:	462a      	mov	r2, r5
 800790a:	f000 fb6f 	bl	8007fec <_realloc_r>
 800790e:	4606      	mov	r6, r0
 8007910:	2800      	cmp	r0, #0
 8007912:	d1e1      	bne.n	80078d8 <__ssputs_r+0x70>
 8007914:	6921      	ldr	r1, [r4, #16]
 8007916:	4650      	mov	r0, sl
 8007918:	f000 fabe 	bl	8007e98 <_free_r>
 800791c:	e7c7      	b.n	80078ae <__ssputs_r+0x46>
	...

08007920 <_svfiprintf_r>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	4698      	mov	r8, r3
 8007926:	898b      	ldrh	r3, [r1, #12]
 8007928:	061b      	lsls	r3, r3, #24
 800792a:	b09d      	sub	sp, #116	; 0x74
 800792c:	4607      	mov	r7, r0
 800792e:	460d      	mov	r5, r1
 8007930:	4614      	mov	r4, r2
 8007932:	d50e      	bpl.n	8007952 <_svfiprintf_r+0x32>
 8007934:	690b      	ldr	r3, [r1, #16]
 8007936:	b963      	cbnz	r3, 8007952 <_svfiprintf_r+0x32>
 8007938:	2140      	movs	r1, #64	; 0x40
 800793a:	f000 fafd 	bl	8007f38 <_malloc_r>
 800793e:	6028      	str	r0, [r5, #0]
 8007940:	6128      	str	r0, [r5, #16]
 8007942:	b920      	cbnz	r0, 800794e <_svfiprintf_r+0x2e>
 8007944:	230c      	movs	r3, #12
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	e0d1      	b.n	8007af2 <_svfiprintf_r+0x1d2>
 800794e:	2340      	movs	r3, #64	; 0x40
 8007950:	616b      	str	r3, [r5, #20]
 8007952:	2300      	movs	r3, #0
 8007954:	9309      	str	r3, [sp, #36]	; 0x24
 8007956:	2320      	movs	r3, #32
 8007958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800795c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007960:	2330      	movs	r3, #48	; 0x30
 8007962:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b0c <_svfiprintf_r+0x1ec>
 8007966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800796a:	f04f 0901 	mov.w	r9, #1
 800796e:	4623      	mov	r3, r4
 8007970:	469a      	mov	sl, r3
 8007972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007976:	b10a      	cbz	r2, 800797c <_svfiprintf_r+0x5c>
 8007978:	2a25      	cmp	r2, #37	; 0x25
 800797a:	d1f9      	bne.n	8007970 <_svfiprintf_r+0x50>
 800797c:	ebba 0b04 	subs.w	fp, sl, r4
 8007980:	d00b      	beq.n	800799a <_svfiprintf_r+0x7a>
 8007982:	465b      	mov	r3, fp
 8007984:	4622      	mov	r2, r4
 8007986:	4629      	mov	r1, r5
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff ff6d 	bl	8007868 <__ssputs_r>
 800798e:	3001      	adds	r0, #1
 8007990:	f000 80aa 	beq.w	8007ae8 <_svfiprintf_r+0x1c8>
 8007994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007996:	445a      	add	r2, fp
 8007998:	9209      	str	r2, [sp, #36]	; 0x24
 800799a:	f89a 3000 	ldrb.w	r3, [sl]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 80a2 	beq.w	8007ae8 <_svfiprintf_r+0x1c8>
 80079a4:	2300      	movs	r3, #0
 80079a6:	f04f 32ff 	mov.w	r2, #4294967295
 80079aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ae:	f10a 0a01 	add.w	sl, sl, #1
 80079b2:	9304      	str	r3, [sp, #16]
 80079b4:	9307      	str	r3, [sp, #28]
 80079b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ba:	931a      	str	r3, [sp, #104]	; 0x68
 80079bc:	4654      	mov	r4, sl
 80079be:	2205      	movs	r2, #5
 80079c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c4:	4851      	ldr	r0, [pc, #324]	; (8007b0c <_svfiprintf_r+0x1ec>)
 80079c6:	f7f8 fc2b 	bl	8000220 <memchr>
 80079ca:	9a04      	ldr	r2, [sp, #16]
 80079cc:	b9d8      	cbnz	r0, 8007a06 <_svfiprintf_r+0xe6>
 80079ce:	06d0      	lsls	r0, r2, #27
 80079d0:	bf44      	itt	mi
 80079d2:	2320      	movmi	r3, #32
 80079d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d8:	0711      	lsls	r1, r2, #28
 80079da:	bf44      	itt	mi
 80079dc:	232b      	movmi	r3, #43	; 0x2b
 80079de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e2:	f89a 3000 	ldrb.w	r3, [sl]
 80079e6:	2b2a      	cmp	r3, #42	; 0x2a
 80079e8:	d015      	beq.n	8007a16 <_svfiprintf_r+0xf6>
 80079ea:	9a07      	ldr	r2, [sp, #28]
 80079ec:	4654      	mov	r4, sl
 80079ee:	2000      	movs	r0, #0
 80079f0:	f04f 0c0a 	mov.w	ip, #10
 80079f4:	4621      	mov	r1, r4
 80079f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079fa:	3b30      	subs	r3, #48	; 0x30
 80079fc:	2b09      	cmp	r3, #9
 80079fe:	d94e      	bls.n	8007a9e <_svfiprintf_r+0x17e>
 8007a00:	b1b0      	cbz	r0, 8007a30 <_svfiprintf_r+0x110>
 8007a02:	9207      	str	r2, [sp, #28]
 8007a04:	e014      	b.n	8007a30 <_svfiprintf_r+0x110>
 8007a06:	eba0 0308 	sub.w	r3, r0, r8
 8007a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	9304      	str	r3, [sp, #16]
 8007a12:	46a2      	mov	sl, r4
 8007a14:	e7d2      	b.n	80079bc <_svfiprintf_r+0x9c>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	1d19      	adds	r1, r3, #4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	9103      	str	r1, [sp, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfbb      	ittet	lt
 8007a22:	425b      	neglt	r3, r3
 8007a24:	f042 0202 	orrlt.w	r2, r2, #2
 8007a28:	9307      	strge	r3, [sp, #28]
 8007a2a:	9307      	strlt	r3, [sp, #28]
 8007a2c:	bfb8      	it	lt
 8007a2e:	9204      	strlt	r2, [sp, #16]
 8007a30:	7823      	ldrb	r3, [r4, #0]
 8007a32:	2b2e      	cmp	r3, #46	; 0x2e
 8007a34:	d10c      	bne.n	8007a50 <_svfiprintf_r+0x130>
 8007a36:	7863      	ldrb	r3, [r4, #1]
 8007a38:	2b2a      	cmp	r3, #42	; 0x2a
 8007a3a:	d135      	bne.n	8007aa8 <_svfiprintf_r+0x188>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	1d1a      	adds	r2, r3, #4
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	9203      	str	r2, [sp, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	bfb8      	it	lt
 8007a48:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a4c:	3402      	adds	r4, #2
 8007a4e:	9305      	str	r3, [sp, #20]
 8007a50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b1c <_svfiprintf_r+0x1fc>
 8007a54:	7821      	ldrb	r1, [r4, #0]
 8007a56:	2203      	movs	r2, #3
 8007a58:	4650      	mov	r0, sl
 8007a5a:	f7f8 fbe1 	bl	8000220 <memchr>
 8007a5e:	b140      	cbz	r0, 8007a72 <_svfiprintf_r+0x152>
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	eba0 000a 	sub.w	r0, r0, sl
 8007a66:	fa03 f000 	lsl.w	r0, r3, r0
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	4303      	orrs	r3, r0
 8007a6e:	3401      	adds	r4, #1
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a76:	4826      	ldr	r0, [pc, #152]	; (8007b10 <_svfiprintf_r+0x1f0>)
 8007a78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a7c:	2206      	movs	r2, #6
 8007a7e:	f7f8 fbcf 	bl	8000220 <memchr>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d038      	beq.n	8007af8 <_svfiprintf_r+0x1d8>
 8007a86:	4b23      	ldr	r3, [pc, #140]	; (8007b14 <_svfiprintf_r+0x1f4>)
 8007a88:	bb1b      	cbnz	r3, 8007ad2 <_svfiprintf_r+0x1b2>
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	3307      	adds	r3, #7
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	3308      	adds	r3, #8
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a98:	4433      	add	r3, r6
 8007a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9c:	e767      	b.n	800796e <_svfiprintf_r+0x4e>
 8007a9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	2001      	movs	r0, #1
 8007aa6:	e7a5      	b.n	80079f4 <_svfiprintf_r+0xd4>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	3401      	adds	r4, #1
 8007aac:	9305      	str	r3, [sp, #20]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	f04f 0c0a 	mov.w	ip, #10
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aba:	3a30      	subs	r2, #48	; 0x30
 8007abc:	2a09      	cmp	r2, #9
 8007abe:	d903      	bls.n	8007ac8 <_svfiprintf_r+0x1a8>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0c5      	beq.n	8007a50 <_svfiprintf_r+0x130>
 8007ac4:	9105      	str	r1, [sp, #20]
 8007ac6:	e7c3      	b.n	8007a50 <_svfiprintf_r+0x130>
 8007ac8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007acc:	4604      	mov	r4, r0
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e7f0      	b.n	8007ab4 <_svfiprintf_r+0x194>
 8007ad2:	ab03      	add	r3, sp, #12
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <_svfiprintf_r+0x1f8>)
 8007ada:	a904      	add	r1, sp, #16
 8007adc:	4638      	mov	r0, r7
 8007ade:	f3af 8000 	nop.w
 8007ae2:	1c42      	adds	r2, r0, #1
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	d1d6      	bne.n	8007a96 <_svfiprintf_r+0x176>
 8007ae8:	89ab      	ldrh	r3, [r5, #12]
 8007aea:	065b      	lsls	r3, r3, #25
 8007aec:	f53f af2c 	bmi.w	8007948 <_svfiprintf_r+0x28>
 8007af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007af2:	b01d      	add	sp, #116	; 0x74
 8007af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af8:	ab03      	add	r3, sp, #12
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	462a      	mov	r2, r5
 8007afe:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <_svfiprintf_r+0x1f8>)
 8007b00:	a904      	add	r1, sp, #16
 8007b02:	4638      	mov	r0, r7
 8007b04:	f000 f87a 	bl	8007bfc <_printf_i>
 8007b08:	e7eb      	b.n	8007ae2 <_svfiprintf_r+0x1c2>
 8007b0a:	bf00      	nop
 8007b0c:	080081f4 	.word	0x080081f4
 8007b10:	080081fe 	.word	0x080081fe
 8007b14:	00000000 	.word	0x00000000
 8007b18:	08007869 	.word	0x08007869
 8007b1c:	080081fa 	.word	0x080081fa

08007b20 <_printf_common>:
 8007b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	4616      	mov	r6, r2
 8007b26:	4699      	mov	r9, r3
 8007b28:	688a      	ldr	r2, [r1, #8]
 8007b2a:	690b      	ldr	r3, [r1, #16]
 8007b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b30:	4293      	cmp	r3, r2
 8007b32:	bfb8      	it	lt
 8007b34:	4613      	movlt	r3, r2
 8007b36:	6033      	str	r3, [r6, #0]
 8007b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	b10a      	cbz	r2, 8007b46 <_printf_common+0x26>
 8007b42:	3301      	adds	r3, #1
 8007b44:	6033      	str	r3, [r6, #0]
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	0699      	lsls	r1, r3, #26
 8007b4a:	bf42      	ittt	mi
 8007b4c:	6833      	ldrmi	r3, [r6, #0]
 8007b4e:	3302      	addmi	r3, #2
 8007b50:	6033      	strmi	r3, [r6, #0]
 8007b52:	6825      	ldr	r5, [r4, #0]
 8007b54:	f015 0506 	ands.w	r5, r5, #6
 8007b58:	d106      	bne.n	8007b68 <_printf_common+0x48>
 8007b5a:	f104 0a19 	add.w	sl, r4, #25
 8007b5e:	68e3      	ldr	r3, [r4, #12]
 8007b60:	6832      	ldr	r2, [r6, #0]
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	42ab      	cmp	r3, r5
 8007b66:	dc26      	bgt.n	8007bb6 <_printf_common+0x96>
 8007b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b6c:	1e13      	subs	r3, r2, #0
 8007b6e:	6822      	ldr	r2, [r4, #0]
 8007b70:	bf18      	it	ne
 8007b72:	2301      	movne	r3, #1
 8007b74:	0692      	lsls	r2, r2, #26
 8007b76:	d42b      	bmi.n	8007bd0 <_printf_common+0xb0>
 8007b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	4638      	mov	r0, r7
 8007b80:	47c0      	blx	r8
 8007b82:	3001      	adds	r0, #1
 8007b84:	d01e      	beq.n	8007bc4 <_printf_common+0xa4>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	68e5      	ldr	r5, [r4, #12]
 8007b8a:	6832      	ldr	r2, [r6, #0]
 8007b8c:	f003 0306 	and.w	r3, r3, #6
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	bf08      	it	eq
 8007b94:	1aad      	subeq	r5, r5, r2
 8007b96:	68a3      	ldr	r3, [r4, #8]
 8007b98:	6922      	ldr	r2, [r4, #16]
 8007b9a:	bf0c      	ite	eq
 8007b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ba0:	2500      	movne	r5, #0
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	bfc4      	itt	gt
 8007ba6:	1a9b      	subgt	r3, r3, r2
 8007ba8:	18ed      	addgt	r5, r5, r3
 8007baa:	2600      	movs	r6, #0
 8007bac:	341a      	adds	r4, #26
 8007bae:	42b5      	cmp	r5, r6
 8007bb0:	d11a      	bne.n	8007be8 <_printf_common+0xc8>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e008      	b.n	8007bc8 <_printf_common+0xa8>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4652      	mov	r2, sl
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	47c0      	blx	r8
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d103      	bne.n	8007bcc <_printf_common+0xac>
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bcc:	3501      	adds	r5, #1
 8007bce:	e7c6      	b.n	8007b5e <_printf_common+0x3e>
 8007bd0:	18e1      	adds	r1, r4, r3
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	2030      	movs	r0, #48	; 0x30
 8007bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bda:	4422      	add	r2, r4
 8007bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007be4:	3302      	adds	r3, #2
 8007be6:	e7c7      	b.n	8007b78 <_printf_common+0x58>
 8007be8:	2301      	movs	r3, #1
 8007bea:	4622      	mov	r2, r4
 8007bec:	4649      	mov	r1, r9
 8007bee:	4638      	mov	r0, r7
 8007bf0:	47c0      	blx	r8
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	d0e6      	beq.n	8007bc4 <_printf_common+0xa4>
 8007bf6:	3601      	adds	r6, #1
 8007bf8:	e7d9      	b.n	8007bae <_printf_common+0x8e>
	...

08007bfc <_printf_i>:
 8007bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c00:	460c      	mov	r4, r1
 8007c02:	4691      	mov	r9, r2
 8007c04:	7e27      	ldrb	r7, [r4, #24]
 8007c06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c08:	2f78      	cmp	r7, #120	; 0x78
 8007c0a:	4680      	mov	r8, r0
 8007c0c:	469a      	mov	sl, r3
 8007c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c12:	d807      	bhi.n	8007c24 <_printf_i+0x28>
 8007c14:	2f62      	cmp	r7, #98	; 0x62
 8007c16:	d80a      	bhi.n	8007c2e <_printf_i+0x32>
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	f000 80d8 	beq.w	8007dce <_printf_i+0x1d2>
 8007c1e:	2f58      	cmp	r7, #88	; 0x58
 8007c20:	f000 80a3 	beq.w	8007d6a <_printf_i+0x16e>
 8007c24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c2c:	e03a      	b.n	8007ca4 <_printf_i+0xa8>
 8007c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c32:	2b15      	cmp	r3, #21
 8007c34:	d8f6      	bhi.n	8007c24 <_printf_i+0x28>
 8007c36:	a001      	add	r0, pc, #4	; (adr r0, 8007c3c <_printf_i+0x40>)
 8007c38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c3c:	08007c95 	.word	0x08007c95
 8007c40:	08007ca9 	.word	0x08007ca9
 8007c44:	08007c25 	.word	0x08007c25
 8007c48:	08007c25 	.word	0x08007c25
 8007c4c:	08007c25 	.word	0x08007c25
 8007c50:	08007c25 	.word	0x08007c25
 8007c54:	08007ca9 	.word	0x08007ca9
 8007c58:	08007c25 	.word	0x08007c25
 8007c5c:	08007c25 	.word	0x08007c25
 8007c60:	08007c25 	.word	0x08007c25
 8007c64:	08007c25 	.word	0x08007c25
 8007c68:	08007db5 	.word	0x08007db5
 8007c6c:	08007cd9 	.word	0x08007cd9
 8007c70:	08007d97 	.word	0x08007d97
 8007c74:	08007c25 	.word	0x08007c25
 8007c78:	08007c25 	.word	0x08007c25
 8007c7c:	08007dd7 	.word	0x08007dd7
 8007c80:	08007c25 	.word	0x08007c25
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007c25 	.word	0x08007c25
 8007c8c:	08007c25 	.word	0x08007c25
 8007c90:	08007d9f 	.word	0x08007d9f
 8007c94:	680b      	ldr	r3, [r1, #0]
 8007c96:	1d1a      	adds	r2, r3, #4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	600a      	str	r2, [r1, #0]
 8007c9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e0a3      	b.n	8007df0 <_printf_i+0x1f4>
 8007ca8:	6825      	ldr	r5, [r4, #0]
 8007caa:	6808      	ldr	r0, [r1, #0]
 8007cac:	062e      	lsls	r6, r5, #24
 8007cae:	f100 0304 	add.w	r3, r0, #4
 8007cb2:	d50a      	bpl.n	8007cca <_printf_i+0xce>
 8007cb4:	6805      	ldr	r5, [r0, #0]
 8007cb6:	600b      	str	r3, [r1, #0]
 8007cb8:	2d00      	cmp	r5, #0
 8007cba:	da03      	bge.n	8007cc4 <_printf_i+0xc8>
 8007cbc:	232d      	movs	r3, #45	; 0x2d
 8007cbe:	426d      	negs	r5, r5
 8007cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cc4:	485e      	ldr	r0, [pc, #376]	; (8007e40 <_printf_i+0x244>)
 8007cc6:	230a      	movs	r3, #10
 8007cc8:	e019      	b.n	8007cfe <_printf_i+0x102>
 8007cca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007cce:	6805      	ldr	r5, [r0, #0]
 8007cd0:	600b      	str	r3, [r1, #0]
 8007cd2:	bf18      	it	ne
 8007cd4:	b22d      	sxthne	r5, r5
 8007cd6:	e7ef      	b.n	8007cb8 <_printf_i+0xbc>
 8007cd8:	680b      	ldr	r3, [r1, #0]
 8007cda:	6825      	ldr	r5, [r4, #0]
 8007cdc:	1d18      	adds	r0, r3, #4
 8007cde:	6008      	str	r0, [r1, #0]
 8007ce0:	0628      	lsls	r0, r5, #24
 8007ce2:	d501      	bpl.n	8007ce8 <_printf_i+0xec>
 8007ce4:	681d      	ldr	r5, [r3, #0]
 8007ce6:	e002      	b.n	8007cee <_printf_i+0xf2>
 8007ce8:	0669      	lsls	r1, r5, #25
 8007cea:	d5fb      	bpl.n	8007ce4 <_printf_i+0xe8>
 8007cec:	881d      	ldrh	r5, [r3, #0]
 8007cee:	4854      	ldr	r0, [pc, #336]	; (8007e40 <_printf_i+0x244>)
 8007cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8007cf2:	bf0c      	ite	eq
 8007cf4:	2308      	moveq	r3, #8
 8007cf6:	230a      	movne	r3, #10
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cfe:	6866      	ldr	r6, [r4, #4]
 8007d00:	60a6      	str	r6, [r4, #8]
 8007d02:	2e00      	cmp	r6, #0
 8007d04:	bfa2      	ittt	ge
 8007d06:	6821      	ldrge	r1, [r4, #0]
 8007d08:	f021 0104 	bicge.w	r1, r1, #4
 8007d0c:	6021      	strge	r1, [r4, #0]
 8007d0e:	b90d      	cbnz	r5, 8007d14 <_printf_i+0x118>
 8007d10:	2e00      	cmp	r6, #0
 8007d12:	d04d      	beq.n	8007db0 <_printf_i+0x1b4>
 8007d14:	4616      	mov	r6, r2
 8007d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d1e:	5dc7      	ldrb	r7, [r0, r7]
 8007d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d24:	462f      	mov	r7, r5
 8007d26:	42bb      	cmp	r3, r7
 8007d28:	460d      	mov	r5, r1
 8007d2a:	d9f4      	bls.n	8007d16 <_printf_i+0x11a>
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d10b      	bne.n	8007d48 <_printf_i+0x14c>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	07df      	lsls	r7, r3, #31
 8007d34:	d508      	bpl.n	8007d48 <_printf_i+0x14c>
 8007d36:	6923      	ldr	r3, [r4, #16]
 8007d38:	6861      	ldr	r1, [r4, #4]
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	bfde      	ittt	le
 8007d3e:	2330      	movle	r3, #48	; 0x30
 8007d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d48:	1b92      	subs	r2, r2, r6
 8007d4a:	6122      	str	r2, [r4, #16]
 8007d4c:	f8cd a000 	str.w	sl, [sp]
 8007d50:	464b      	mov	r3, r9
 8007d52:	aa03      	add	r2, sp, #12
 8007d54:	4621      	mov	r1, r4
 8007d56:	4640      	mov	r0, r8
 8007d58:	f7ff fee2 	bl	8007b20 <_printf_common>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d14c      	bne.n	8007dfa <_printf_i+0x1fe>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	b004      	add	sp, #16
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6a:	4835      	ldr	r0, [pc, #212]	; (8007e40 <_printf_i+0x244>)
 8007d6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	680e      	ldr	r6, [r1, #0]
 8007d74:	061f      	lsls	r7, r3, #24
 8007d76:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d7a:	600e      	str	r6, [r1, #0]
 8007d7c:	d514      	bpl.n	8007da8 <_printf_i+0x1ac>
 8007d7e:	07d9      	lsls	r1, r3, #31
 8007d80:	bf44      	itt	mi
 8007d82:	f043 0320 	orrmi.w	r3, r3, #32
 8007d86:	6023      	strmi	r3, [r4, #0]
 8007d88:	b91d      	cbnz	r5, 8007d92 <_printf_i+0x196>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	f023 0320 	bic.w	r3, r3, #32
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	2310      	movs	r3, #16
 8007d94:	e7b0      	b.n	8007cf8 <_printf_i+0xfc>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	f043 0320 	orr.w	r3, r3, #32
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	2378      	movs	r3, #120	; 0x78
 8007da0:	4828      	ldr	r0, [pc, #160]	; (8007e44 <_printf_i+0x248>)
 8007da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007da6:	e7e3      	b.n	8007d70 <_printf_i+0x174>
 8007da8:	065e      	lsls	r6, r3, #25
 8007daa:	bf48      	it	mi
 8007dac:	b2ad      	uxthmi	r5, r5
 8007dae:	e7e6      	b.n	8007d7e <_printf_i+0x182>
 8007db0:	4616      	mov	r6, r2
 8007db2:	e7bb      	b.n	8007d2c <_printf_i+0x130>
 8007db4:	680b      	ldr	r3, [r1, #0]
 8007db6:	6826      	ldr	r6, [r4, #0]
 8007db8:	6960      	ldr	r0, [r4, #20]
 8007dba:	1d1d      	adds	r5, r3, #4
 8007dbc:	600d      	str	r5, [r1, #0]
 8007dbe:	0635      	lsls	r5, r6, #24
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	d501      	bpl.n	8007dc8 <_printf_i+0x1cc>
 8007dc4:	6018      	str	r0, [r3, #0]
 8007dc6:	e002      	b.n	8007dce <_printf_i+0x1d2>
 8007dc8:	0671      	lsls	r1, r6, #25
 8007dca:	d5fb      	bpl.n	8007dc4 <_printf_i+0x1c8>
 8007dcc:	8018      	strh	r0, [r3, #0]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6123      	str	r3, [r4, #16]
 8007dd2:	4616      	mov	r6, r2
 8007dd4:	e7ba      	b.n	8007d4c <_printf_i+0x150>
 8007dd6:	680b      	ldr	r3, [r1, #0]
 8007dd8:	1d1a      	adds	r2, r3, #4
 8007dda:	600a      	str	r2, [r1, #0]
 8007ddc:	681e      	ldr	r6, [r3, #0]
 8007dde:	6862      	ldr	r2, [r4, #4]
 8007de0:	2100      	movs	r1, #0
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7f8 fa1c 	bl	8000220 <memchr>
 8007de8:	b108      	cbz	r0, 8007dee <_printf_i+0x1f2>
 8007dea:	1b80      	subs	r0, r0, r6
 8007dec:	6060      	str	r0, [r4, #4]
 8007dee:	6863      	ldr	r3, [r4, #4]
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	2300      	movs	r3, #0
 8007df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df8:	e7a8      	b.n	8007d4c <_printf_i+0x150>
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	4649      	mov	r1, r9
 8007e00:	4640      	mov	r0, r8
 8007e02:	47d0      	blx	sl
 8007e04:	3001      	adds	r0, #1
 8007e06:	d0ab      	beq.n	8007d60 <_printf_i+0x164>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	079b      	lsls	r3, r3, #30
 8007e0c:	d413      	bmi.n	8007e36 <_printf_i+0x23a>
 8007e0e:	68e0      	ldr	r0, [r4, #12]
 8007e10:	9b03      	ldr	r3, [sp, #12]
 8007e12:	4298      	cmp	r0, r3
 8007e14:	bfb8      	it	lt
 8007e16:	4618      	movlt	r0, r3
 8007e18:	e7a4      	b.n	8007d64 <_printf_i+0x168>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4632      	mov	r2, r6
 8007e1e:	4649      	mov	r1, r9
 8007e20:	4640      	mov	r0, r8
 8007e22:	47d0      	blx	sl
 8007e24:	3001      	adds	r0, #1
 8007e26:	d09b      	beq.n	8007d60 <_printf_i+0x164>
 8007e28:	3501      	adds	r5, #1
 8007e2a:	68e3      	ldr	r3, [r4, #12]
 8007e2c:	9903      	ldr	r1, [sp, #12]
 8007e2e:	1a5b      	subs	r3, r3, r1
 8007e30:	42ab      	cmp	r3, r5
 8007e32:	dcf2      	bgt.n	8007e1a <_printf_i+0x21e>
 8007e34:	e7eb      	b.n	8007e0e <_printf_i+0x212>
 8007e36:	2500      	movs	r5, #0
 8007e38:	f104 0619 	add.w	r6, r4, #25
 8007e3c:	e7f5      	b.n	8007e2a <_printf_i+0x22e>
 8007e3e:	bf00      	nop
 8007e40:	08008205 	.word	0x08008205
 8007e44:	08008216 	.word	0x08008216

08007e48 <memcpy>:
 8007e48:	440a      	add	r2, r1
 8007e4a:	4291      	cmp	r1, r2
 8007e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e50:	d100      	bne.n	8007e54 <memcpy+0xc>
 8007e52:	4770      	bx	lr
 8007e54:	b510      	push	{r4, lr}
 8007e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e5e:	4291      	cmp	r1, r2
 8007e60:	d1f9      	bne.n	8007e56 <memcpy+0xe>
 8007e62:	bd10      	pop	{r4, pc}

08007e64 <memmove>:
 8007e64:	4288      	cmp	r0, r1
 8007e66:	b510      	push	{r4, lr}
 8007e68:	eb01 0402 	add.w	r4, r1, r2
 8007e6c:	d902      	bls.n	8007e74 <memmove+0x10>
 8007e6e:	4284      	cmp	r4, r0
 8007e70:	4623      	mov	r3, r4
 8007e72:	d807      	bhi.n	8007e84 <memmove+0x20>
 8007e74:	1e43      	subs	r3, r0, #1
 8007e76:	42a1      	cmp	r1, r4
 8007e78:	d008      	beq.n	8007e8c <memmove+0x28>
 8007e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e82:	e7f8      	b.n	8007e76 <memmove+0x12>
 8007e84:	4402      	add	r2, r0
 8007e86:	4601      	mov	r1, r0
 8007e88:	428a      	cmp	r2, r1
 8007e8a:	d100      	bne.n	8007e8e <memmove+0x2a>
 8007e8c:	bd10      	pop	{r4, pc}
 8007e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e96:	e7f7      	b.n	8007e88 <memmove+0x24>

08007e98 <_free_r>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	d048      	beq.n	8007f30 <_free_r+0x98>
 8007e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea2:	9001      	str	r0, [sp, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eaa:	bfb8      	it	lt
 8007eac:	18e4      	addlt	r4, r4, r3
 8007eae:	f000 f8d3 	bl	8008058 <__malloc_lock>
 8007eb2:	4a20      	ldr	r2, [pc, #128]	; (8007f34 <_free_r+0x9c>)
 8007eb4:	9801      	ldr	r0, [sp, #4]
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	4615      	mov	r5, r2
 8007eba:	b933      	cbnz	r3, 8007eca <_free_r+0x32>
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	6014      	str	r4, [r2, #0]
 8007ec0:	b003      	add	sp, #12
 8007ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec6:	f000 b8cd 	b.w	8008064 <__malloc_unlock>
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	d90b      	bls.n	8007ee6 <_free_r+0x4e>
 8007ece:	6821      	ldr	r1, [r4, #0]
 8007ed0:	1862      	adds	r2, r4, r1
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bf04      	itt	eq
 8007ed6:	681a      	ldreq	r2, [r3, #0]
 8007ed8:	685b      	ldreq	r3, [r3, #4]
 8007eda:	6063      	str	r3, [r4, #4]
 8007edc:	bf04      	itt	eq
 8007ede:	1852      	addeq	r2, r2, r1
 8007ee0:	6022      	streq	r2, [r4, #0]
 8007ee2:	602c      	str	r4, [r5, #0]
 8007ee4:	e7ec      	b.n	8007ec0 <_free_r+0x28>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b10b      	cbz	r3, 8007ef0 <_free_r+0x58>
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d9fa      	bls.n	8007ee6 <_free_r+0x4e>
 8007ef0:	6811      	ldr	r1, [r2, #0]
 8007ef2:	1855      	adds	r5, r2, r1
 8007ef4:	42a5      	cmp	r5, r4
 8007ef6:	d10b      	bne.n	8007f10 <_free_r+0x78>
 8007ef8:	6824      	ldr	r4, [r4, #0]
 8007efa:	4421      	add	r1, r4
 8007efc:	1854      	adds	r4, r2, r1
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6011      	str	r1, [r2, #0]
 8007f02:	d1dd      	bne.n	8007ec0 <_free_r+0x28>
 8007f04:	681c      	ldr	r4, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	6053      	str	r3, [r2, #4]
 8007f0a:	4421      	add	r1, r4
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	e7d7      	b.n	8007ec0 <_free_r+0x28>
 8007f10:	d902      	bls.n	8007f18 <_free_r+0x80>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	e7d3      	b.n	8007ec0 <_free_r+0x28>
 8007f18:	6825      	ldr	r5, [r4, #0]
 8007f1a:	1961      	adds	r1, r4, r5
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	bf04      	itt	eq
 8007f20:	6819      	ldreq	r1, [r3, #0]
 8007f22:	685b      	ldreq	r3, [r3, #4]
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	bf04      	itt	eq
 8007f28:	1949      	addeq	r1, r1, r5
 8007f2a:	6021      	streq	r1, [r4, #0]
 8007f2c:	6054      	str	r4, [r2, #4]
 8007f2e:	e7c7      	b.n	8007ec0 <_free_r+0x28>
 8007f30:	b003      	add	sp, #12
 8007f32:	bd30      	pop	{r4, r5, pc}
 8007f34:	200000ac 	.word	0x200000ac

08007f38 <_malloc_r>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	1ccd      	adds	r5, r1, #3
 8007f3c:	f025 0503 	bic.w	r5, r5, #3
 8007f40:	3508      	adds	r5, #8
 8007f42:	2d0c      	cmp	r5, #12
 8007f44:	bf38      	it	cc
 8007f46:	250c      	movcc	r5, #12
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	db01      	blt.n	8007f52 <_malloc_r+0x1a>
 8007f4e:	42a9      	cmp	r1, r5
 8007f50:	d903      	bls.n	8007f5a <_malloc_r+0x22>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	2000      	movs	r0, #0
 8007f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5a:	f000 f87d 	bl	8008058 <__malloc_lock>
 8007f5e:	4921      	ldr	r1, [pc, #132]	; (8007fe4 <_malloc_r+0xac>)
 8007f60:	680a      	ldr	r2, [r1, #0]
 8007f62:	4614      	mov	r4, r2
 8007f64:	b99c      	cbnz	r4, 8007f8e <_malloc_r+0x56>
 8007f66:	4f20      	ldr	r7, [pc, #128]	; (8007fe8 <_malloc_r+0xb0>)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	b923      	cbnz	r3, 8007f76 <_malloc_r+0x3e>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f000 f862 	bl	8008038 <_sbrk_r>
 8007f74:	6038      	str	r0, [r7, #0]
 8007f76:	4629      	mov	r1, r5
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f85d 	bl	8008038 <_sbrk_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d123      	bne.n	8007fca <_malloc_r+0x92>
 8007f82:	230c      	movs	r3, #12
 8007f84:	6033      	str	r3, [r6, #0]
 8007f86:	4630      	mov	r0, r6
 8007f88:	f000 f86c 	bl	8008064 <__malloc_unlock>
 8007f8c:	e7e3      	b.n	8007f56 <_malloc_r+0x1e>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	1b5b      	subs	r3, r3, r5
 8007f92:	d417      	bmi.n	8007fc4 <_malloc_r+0x8c>
 8007f94:	2b0b      	cmp	r3, #11
 8007f96:	d903      	bls.n	8007fa0 <_malloc_r+0x68>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	441c      	add	r4, r3
 8007f9c:	6025      	str	r5, [r4, #0]
 8007f9e:	e004      	b.n	8007faa <_malloc_r+0x72>
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	42a2      	cmp	r2, r4
 8007fa4:	bf0c      	ite	eq
 8007fa6:	600b      	streq	r3, [r1, #0]
 8007fa8:	6053      	strne	r3, [r2, #4]
 8007faa:	4630      	mov	r0, r6
 8007fac:	f000 f85a 	bl	8008064 <__malloc_unlock>
 8007fb0:	f104 000b 	add.w	r0, r4, #11
 8007fb4:	1d23      	adds	r3, r4, #4
 8007fb6:	f020 0007 	bic.w	r0, r0, #7
 8007fba:	1ac2      	subs	r2, r0, r3
 8007fbc:	d0cc      	beq.n	8007f58 <_malloc_r+0x20>
 8007fbe:	1a1b      	subs	r3, r3, r0
 8007fc0:	50a3      	str	r3, [r4, r2]
 8007fc2:	e7c9      	b.n	8007f58 <_malloc_r+0x20>
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	6864      	ldr	r4, [r4, #4]
 8007fc8:	e7cc      	b.n	8007f64 <_malloc_r+0x2c>
 8007fca:	1cc4      	adds	r4, r0, #3
 8007fcc:	f024 0403 	bic.w	r4, r4, #3
 8007fd0:	42a0      	cmp	r0, r4
 8007fd2:	d0e3      	beq.n	8007f9c <_malloc_r+0x64>
 8007fd4:	1a21      	subs	r1, r4, r0
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f82e 	bl	8008038 <_sbrk_r>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d1dd      	bne.n	8007f9c <_malloc_r+0x64>
 8007fe0:	e7cf      	b.n	8007f82 <_malloc_r+0x4a>
 8007fe2:	bf00      	nop
 8007fe4:	200000ac 	.word	0x200000ac
 8007fe8:	200000b0 	.word	0x200000b0

08007fec <_realloc_r>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	4607      	mov	r7, r0
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	460e      	mov	r6, r1
 8007ff4:	b921      	cbnz	r1, 8008000 <_realloc_r+0x14>
 8007ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	f7ff bf9c 	b.w	8007f38 <_malloc_r>
 8008000:	b922      	cbnz	r2, 800800c <_realloc_r+0x20>
 8008002:	f7ff ff49 	bl	8007e98 <_free_r>
 8008006:	4625      	mov	r5, r4
 8008008:	4628      	mov	r0, r5
 800800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800800c:	f000 f830 	bl	8008070 <_malloc_usable_size_r>
 8008010:	42a0      	cmp	r0, r4
 8008012:	d20f      	bcs.n	8008034 <_realloc_r+0x48>
 8008014:	4621      	mov	r1, r4
 8008016:	4638      	mov	r0, r7
 8008018:	f7ff ff8e 	bl	8007f38 <_malloc_r>
 800801c:	4605      	mov	r5, r0
 800801e:	2800      	cmp	r0, #0
 8008020:	d0f2      	beq.n	8008008 <_realloc_r+0x1c>
 8008022:	4631      	mov	r1, r6
 8008024:	4622      	mov	r2, r4
 8008026:	f7ff ff0f 	bl	8007e48 <memcpy>
 800802a:	4631      	mov	r1, r6
 800802c:	4638      	mov	r0, r7
 800802e:	f7ff ff33 	bl	8007e98 <_free_r>
 8008032:	e7e9      	b.n	8008008 <_realloc_r+0x1c>
 8008034:	4635      	mov	r5, r6
 8008036:	e7e7      	b.n	8008008 <_realloc_r+0x1c>

08008038 <_sbrk_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4d06      	ldr	r5, [pc, #24]	; (8008054 <_sbrk_r+0x1c>)
 800803c:	2300      	movs	r3, #0
 800803e:	4604      	mov	r4, r0
 8008040:	4608      	mov	r0, r1
 8008042:	602b      	str	r3, [r5, #0]
 8008044:	f7fa fa9a 	bl	800257c <_sbrk>
 8008048:	1c43      	adds	r3, r0, #1
 800804a:	d102      	bne.n	8008052 <_sbrk_r+0x1a>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	b103      	cbz	r3, 8008052 <_sbrk_r+0x1a>
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	20000264 	.word	0x20000264

08008058 <__malloc_lock>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__malloc_lock+0x8>)
 800805a:	f000 b811 	b.w	8008080 <__retarget_lock_acquire_recursive>
 800805e:	bf00      	nop
 8008060:	2000026c 	.word	0x2000026c

08008064 <__malloc_unlock>:
 8008064:	4801      	ldr	r0, [pc, #4]	; (800806c <__malloc_unlock+0x8>)
 8008066:	f000 b80c 	b.w	8008082 <__retarget_lock_release_recursive>
 800806a:	bf00      	nop
 800806c:	2000026c 	.word	0x2000026c

08008070 <_malloc_usable_size_r>:
 8008070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008074:	1f18      	subs	r0, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	bfbc      	itt	lt
 800807a:	580b      	ldrlt	r3, [r1, r0]
 800807c:	18c0      	addlt	r0, r0, r3
 800807e:	4770      	bx	lr

08008080 <__retarget_lock_acquire_recursive>:
 8008080:	4770      	bx	lr

08008082 <__retarget_lock_release_recursive>:
 8008082:	4770      	bx	lr
 8008084:	0000      	movs	r0, r0
	...

08008088 <floor>:
 8008088:	ec51 0b10 	vmov	r0, r1, d0
 800808c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008090:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008094:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008098:	2e13      	cmp	r6, #19
 800809a:	ee10 5a10 	vmov	r5, s0
 800809e:	ee10 8a10 	vmov	r8, s0
 80080a2:	460c      	mov	r4, r1
 80080a4:	dc32      	bgt.n	800810c <floor+0x84>
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	da14      	bge.n	80080d4 <floor+0x4c>
 80080aa:	a333      	add	r3, pc, #204	; (adr r3, 8008178 <floor+0xf0>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 f90c 	bl	80002cc <__adddf3>
 80080b4:	2200      	movs	r2, #0
 80080b6:	2300      	movs	r3, #0
 80080b8:	f7f8 fd4e 	bl	8000b58 <__aeabi_dcmpgt>
 80080bc:	b138      	cbz	r0, 80080ce <floor+0x46>
 80080be:	2c00      	cmp	r4, #0
 80080c0:	da57      	bge.n	8008172 <floor+0xea>
 80080c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80080c6:	431d      	orrs	r5, r3
 80080c8:	d001      	beq.n	80080ce <floor+0x46>
 80080ca:	4c2d      	ldr	r4, [pc, #180]	; (8008180 <floor+0xf8>)
 80080cc:	2500      	movs	r5, #0
 80080ce:	4621      	mov	r1, r4
 80080d0:	4628      	mov	r0, r5
 80080d2:	e025      	b.n	8008120 <floor+0x98>
 80080d4:	4f2b      	ldr	r7, [pc, #172]	; (8008184 <floor+0xfc>)
 80080d6:	4137      	asrs	r7, r6
 80080d8:	ea01 0307 	and.w	r3, r1, r7
 80080dc:	4303      	orrs	r3, r0
 80080de:	d01f      	beq.n	8008120 <floor+0x98>
 80080e0:	a325      	add	r3, pc, #148	; (adr r3, 8008178 <floor+0xf0>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	f7f8 f8f1 	bl	80002cc <__adddf3>
 80080ea:	2200      	movs	r2, #0
 80080ec:	2300      	movs	r3, #0
 80080ee:	f7f8 fd33 	bl	8000b58 <__aeabi_dcmpgt>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d0eb      	beq.n	80080ce <floor+0x46>
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	bfbe      	ittt	lt
 80080fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80080fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8008102:	19a4      	addlt	r4, r4, r6
 8008104:	ea24 0407 	bic.w	r4, r4, r7
 8008108:	2500      	movs	r5, #0
 800810a:	e7e0      	b.n	80080ce <floor+0x46>
 800810c:	2e33      	cmp	r6, #51	; 0x33
 800810e:	dd0b      	ble.n	8008128 <floor+0xa0>
 8008110:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008114:	d104      	bne.n	8008120 <floor+0x98>
 8008116:	ee10 2a10 	vmov	r2, s0
 800811a:	460b      	mov	r3, r1
 800811c:	f7f8 f8d6 	bl	80002cc <__adddf3>
 8008120:	ec41 0b10 	vmov	d0, r0, r1
 8008124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008128:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800812c:	f04f 33ff 	mov.w	r3, #4294967295
 8008130:	fa23 f707 	lsr.w	r7, r3, r7
 8008134:	4207      	tst	r7, r0
 8008136:	d0f3      	beq.n	8008120 <floor+0x98>
 8008138:	a30f      	add	r3, pc, #60	; (adr r3, 8008178 <floor+0xf0>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 f8c5 	bl	80002cc <__adddf3>
 8008142:	2200      	movs	r2, #0
 8008144:	2300      	movs	r3, #0
 8008146:	f7f8 fd07 	bl	8000b58 <__aeabi_dcmpgt>
 800814a:	2800      	cmp	r0, #0
 800814c:	d0bf      	beq.n	80080ce <floor+0x46>
 800814e:	2c00      	cmp	r4, #0
 8008150:	da02      	bge.n	8008158 <floor+0xd0>
 8008152:	2e14      	cmp	r6, #20
 8008154:	d103      	bne.n	800815e <floor+0xd6>
 8008156:	3401      	adds	r4, #1
 8008158:	ea25 0507 	bic.w	r5, r5, r7
 800815c:	e7b7      	b.n	80080ce <floor+0x46>
 800815e:	2301      	movs	r3, #1
 8008160:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008164:	fa03 f606 	lsl.w	r6, r3, r6
 8008168:	4435      	add	r5, r6
 800816a:	4545      	cmp	r5, r8
 800816c:	bf38      	it	cc
 800816e:	18e4      	addcc	r4, r4, r3
 8008170:	e7f2      	b.n	8008158 <floor+0xd0>
 8008172:	2500      	movs	r5, #0
 8008174:	462c      	mov	r4, r5
 8008176:	e7aa      	b.n	80080ce <floor+0x46>
 8008178:	8800759c 	.word	0x8800759c
 800817c:	7e37e43c 	.word	0x7e37e43c
 8008180:	bff00000 	.word	0xbff00000
 8008184:	000fffff 	.word	0x000fffff

08008188 <_init>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr

08008194 <_fini>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr
